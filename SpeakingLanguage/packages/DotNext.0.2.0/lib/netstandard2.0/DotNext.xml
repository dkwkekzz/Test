<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNext</name>
    </assembly>
    <members>
        <member name="T:DotNext.BoundType">
            <summary>
            Indicates whether an endpoint of some range is contained in the range itself ("closed") or not ("open").
            </summary>
            <remarks>
            If a range is unbounded on a side, it is neither open nor closed on that side; the bound simply does not exist.
            </remarks>
        </member>
        <member name="F:DotNext.BoundType.Open">
            <summary>
            Both endpoints are not considered part of the set: (X, Y)
            </summary>
        </member>
        <member name="F:DotNext.BoundType.LeftClosed">
            <summary>
            The left endpoint value is considered part of the set: [X, Y)
            </summary>
        </member>
        <member name="F:DotNext.BoundType.RightClosed">
            <summary>
            The right endpoint value is considered part of the set: (X, Y]
            </summary>
        </member>
        <member name="F:DotNext.BoundType.Closed">
            <summary>
            Both endpoints are considered part of the set.
            </summary>
        </member>
        <member name="T:DotNext.Buffers.ArrayRental`1">
            <summary>
            Represents array obtained from array pool.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
        </member>
        <member name="M:DotNext.Buffers.ArrayRental`1.#ctor(System.Buffers.ArrayPool{`0},System.Int32,System.Boolean)">
            <summary>
            Obtains a new array from array pool.
            </summary>
            <param name="pool">Array pool.</param>
            <param name="minimumLength">The minimum length of the array.</param>
            <param name="clearArray">Indicates whether the contents of the array should be cleared after calling of <see cref="M:DotNext.Buffers.ArrayRental`1.Dispose"/>.</param>
        </member>
        <member name="M:DotNext.Buffers.ArrayRental`1.op_Implicit(DotNext.Buffers.ArrayRental{`0}@)~`0[]">
            <summary>
            Obtains rented array.
            </summary>
            <param name="rental">Array rental.</param>
        </member>
        <member name="M:DotNext.Buffers.ArrayRental`1.Dispose">
            <summary>
            Returns array to the pool.
            </summary>
        </member>
        <member name="T:DotNext.Collections.Generic.Collection">
            <summary>
            Provides utility methods to work with collections.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.Collection.AsReadOnlyView``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns read-only view of the collection. 
            </summary>
            <param name="collection">A collection to be wrapped into read-only representation.</param>
            <typeparam name="T">Type of items in the collection.</typeparam>
            <returns>Read-only view of the collection.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Collection.Convert``2(System.Collections.Generic.IReadOnlyCollection{``0},System.Converter{``0,``1})">
            <summary>
            Returns lazily converted read-only collection.
            </summary>
            <typeparam name="I">Type of items in the source collection.</typeparam>
            <typeparam name="O">Type of items in the target collection.</typeparam>
            <param name="collection">Read-only collection to convert.</param>
            <param name="converter">A collection item conversion function.</param>
            <returns>Lazily converted read-only collection.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Collection.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts collection into single-dimensional array.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
            <param name="collection">A collection to convert.</param>
            <returns>Array of collection items.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Collection.ToArray``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Converts read-only collection into single-dimensional array.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
            <param name="collection">A collection to convert.</param>
            <returns>Array of collection items.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Collection.AddAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds multiple items into collection.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
            <param name="collection">A collection to modify.</param>
            <param name="items">An items to add into collection.</param>
        </member>
        <member name="T:DotNext.Collections.Generic.Dictionary">
            <summary>
            Represents various extensions for types <see cref="T:System.Collections.Generic.Dictionary`2"/>
            and <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="T:DotNext.Collections.Generic.Dictionary.Indexer`2">
            <summary>
            Provides strongly-typed access to dictionary indexer.
            </summary>
            <typeparam name="K">Type of keys in the dictionary.</typeparam>
            <typeparam name="V">Type of values in the dictionary.</typeparam>
        </member>
        <member name="P:DotNext.Collections.Generic.Dictionary.Indexer`2.ReadOnly">
            <summary>
            Represents read-only dictionary indexer.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.Dictionary.Indexer`2.Getter">
            <summary>
            Represents dictionary value getter.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.Dictionary.Indexer`2.Setter">
            <summary>
            Represents dictionary value setter.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.IndexerGetter``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Returns <see cref="M:System.Collections.Generic.IReadOnlyDictionary`2.get_Item(`0)"/> as
            delegate attached to the dictionary instance.
            </summary>
            <typeparam name="K">Type of dictionary keys.</typeparam>
            <typeparam name="V">Type of dictionary values.</typeparam>
            <param name="dictionary">Read-only dictionary instance.</param>
            <returns>A delegate representing dictionary indexer.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.IndexerGetter``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns <see cref="M:System.Collections.Generic.IDictionary`2.get_Item(`0)"/> as
            delegate attached to the dictionary instance.
            </summary>
            <typeparam name="K">Type of dictionary keys.</typeparam>
            <typeparam name="V">Type of dictionary values.</typeparam>
            <param name="dictionary">Mutable dictionary instance.</param>
            <returns>A delegate representing dictionary indexer.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.IndexerSetter``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns <see cref="M:System.Collections.Generic.IDictionary`2.set_Item(`0,`1)"/> as
            delegate attached to the dictionary instance.
            </summary>
            <typeparam name="K">Type of dictionary keys.</typeparam>
            <typeparam name="V">Type of dictionary values.</typeparam>
            <param name="dictionary">Mutable dictionary instance.</param>
            <returns>A delegate representing dictionary indexer.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstruct key/value pair.
            </summary>
            <typeparam name="K">Type of key.</typeparam>
            <typeparam name="V">Type of value.</typeparam>
            <param name="pair">A pair to decompose.</param>
            <param name="key">Deconstructed key.</param>
            <param name="value">Deconstructed value.</param>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Adds a key-value pair to the dictionary if the key does not exist.
            </summary>
            <typeparam name="K">The key type of the dictionary.</typeparam>
            <typeparam name="V">The value type of the dictionary.</typeparam>
            <param name="dictionary">The source dictionary.</param>
            <param name="key">The key of the key-value pair.</param>
            <param name="value">The value of the key-value pair.</param>
            <returns>
            The corresponding value in the dictionary if <paramref name="key"/> already exists, 
            or <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Generates a value and adds the key-value pair to the dictionary if the key does not
            exist.
            </summary>
            <typeparam name="K">The key type of the dictionary.</typeparam>
            <typeparam name="V">The value type of the dictionary.</typeparam>
            <param name="dictionary">The source dictionary.</param>
            <param name="key">The key of the key-value pair.</param>
            <param name="valueFactory">
            The function used to generate the value from the key.
            </param>
            <returns>
            The corresponding value in the dictionary if <paramref name="key"/> already exists, 
            or the value generated by <paramref name="valueFactory"/>.
            </returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            Applies specific action to each dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary"></param>
            <param name="action"></param>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.GetOrInvoke``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets dictionary value by key if it exists or
            invoke <paramref name="defaultValue"/> and
            return its result as a default value.
            </summary>
            <typeparam name="K">Type of dictionary keys.</typeparam>
            <typeparam name="V">Type of dictionary values.</typeparam>
            <param name="dictionary">A dictionary to read from.</param>
            <param name="key">A key associated with the value.</param>
            <param name="defaultValue">A delegate to be invoked if key doesn't exist in the dictionary.</param>
            <returns>The value associated with the key or returned by the delegate.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.ConvertValue``3(System.Collections.Generic.IDictionary{``0,``1},``0,System.Converter{``1,``2})">
            <summary>
            Gets dictionary value associated with the key
            and convert that value using passed converter.
            </summary>
            <typeparam name="K">Type of dictionary keys.</typeparam>
            <typeparam name="V">Type of dictionary values.</typeparam>
            <typeparam name="T">Type of value conversion result.</typeparam>
            <param name="dictionary">A dictionary to read from.</param>
            <param name="key">A key associated with value.</param>
            <param name="mapper">Value converter.</param>
            <returns>Converted value associated with the key.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.ConvertValue``3(System.Collections.Generic.IDictionary{``0,``1},``0,System.Converter{``1,``2},``2@)">
            <summary>
            Gets dictionary value associated with the key
            and convert that value using passed converter.
            </summary>
            <typeparam name="K">Type of dictionary keys.</typeparam>
            <typeparam name="V">Type of dictionary values.</typeparam>
            <typeparam name="T">Type of value conversion result.</typeparam>
            <param name="dictionary">A dictionary to read from.</param>
            <param name="key">A key associated with value.</param>
            <param name="mapper">Value converter.</param>
            <param name="value">Converted value associated with the key.</param>
            <returns><see langword="true"/>, if key exists in the dictionary; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.AsReadOnlyView``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Obtains read-only view of the dictionary.
            </summary>
            <remarks>
            Any changes in the dictionary will be visible from read-only view.
            </remarks>
            <typeparam name="K">Type of keys.</typeparam>
            <typeparam name="V">Type of values.</typeparam>
            <param name="dictionary">A dictionary.</param>
            <returns>Read-only view of the dictionary.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Dictionary.Convert``3(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Converter{``1,``2})">
            <summary>
            Applies lazy conversion for each dictionary value.
            </summary>
            <typeparam name="K">Type of keys.</typeparam>
            <typeparam name="V">Type of values.</typeparam>
            <typeparam name="T">Type of mapped values.</typeparam>
            <param name="dictionary">A dictionary to be mapped.</param>
            <param name="mapper">Mapping function.</param>
            <returns>Read-only view of the dictionary where each value is converted in lazy manner.</returns>
        </member>
        <member name="T:DotNext.Collections.Generic.List">
            <summary>
            Provides various extensions for <see cref="T:System.Collections.Generic.IList`1"/> interface.
            </summary>
        </member>
        <member name="T:DotNext.Collections.Generic.List.Indexer`1">
            <summary>
            Provides strongly-typed access to list indexer.
            </summary>
            <typeparam name="T">Type of list items.</typeparam>
        </member>
        <member name="P:DotNext.Collections.Generic.List.Indexer`1.ReadOnly">
            <summary>
            Represents read-only list item getter.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.List.Indexer`1.Getter">
            <summary>
            Represents list item getter.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.List.Indexer`1.Setter">
            <summary>
            Represents list item setter.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.List.IndexerGetter``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Returns <see cref="M:System.Collections.Generic.IReadOnlyList`1.get_Item(System.Int32)"/> as delegate
            attached to the list instance.
            </summary>
            <typeparam name="T">Type of list items.</typeparam>
            <param name="list">Read-only list instance.</param>
            <returns>A delegate representing indexer.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.List.IndexerGetter``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns <see cref="M:System.Collections.Generic.IList`1.get_Item(System.Int32)"/> as delegate
            attached to the list instance. 
            </summary>
            <typeparam name="T">Type of list items.</typeparam>
            <param name="list">Mutable list instance.</param>
            <returns>A delegate representing indexer.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.List.IndexerSetter``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns <see cref="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)"/> as delegate
            attached to the list instance.
            </summary>
            <typeparam name="T">Type of list items.</typeparam>
            <param name="list">Mutable list instance.</param>
            <returns>A delegate representing indexer.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.List.ToArray``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1})">
            <summary>
            Converts list into array and perform mapping for each
            element.
            </summary>
            <typeparam name="I">Type of elements in the list.</typeparam>
            <typeparam name="O">Type of elements in the output array.</typeparam>
            <param name="input">A list to convert. Cannot be <see langword="null"/>.</param>
            <param name="mapper">Element mapping function.</param>
            <returns>An array of list items.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.List.ToArray``2(System.Collections.Generic.IList{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            Converts list into array and perform mapping for each
            element.
            </summary>
            <typeparam name="I">Type of elements in the list.</typeparam>
            <typeparam name="O">Type of elements in the output array.</typeparam>
            <param name="input">A list to convert. Cannot be <see langword="null"/>.</param>
            <param name="mapper">Index-aware element mapping function.</param>
            <returns>An array of list items.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.List.AsReadOnlyView``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns read-only view of the list. 
            </summary>
            <param name="list">A list to be wrapped into read-only representation.</param>
            <typeparam name="T">Type of items in the list.</typeparam>
            <returns>Read-only view of the list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.List.Convert``2(System.Collections.Generic.IReadOnlyList{``0},System.Converter{``0,``1})">
            <summary>
            Returns lazily converted read-only list.
            </summary>
            <param name="list">Read-only list to convert.</param>
            <param name="converter">A list item conversion function.</param>
            <typeparam name="I">Type of items in the source list.</typeparam>
            <typeparam name="O">Type of items in the target list.</typeparam>
            <returns>Lazily converted read-only list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.List.Singleton``1(``0)">
            <summary>
            Constructs read-only list with single item in it.
            </summary>
            <param name="item">An item to be placed into list.</param>
            <typeparam name="T">Type of list items.</typeparam>
            <returns>Read-only list containing single item.</returns>
        </member>
        <member name="T:DotNext.Collections.Generic.ReadOnlyCollectionView`1">
            <summary>
            Represents read-only view of the mutable collection.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
            <remarks>
            Any changes in the original list are visible from the read-only view.
            </remarks>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new read-only view for the mutable collection.
            </summary>
            <param name="collection">A collection to wrap.</param>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyCollectionView`1.Count">
            <summary>
            Count of items in the collection.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`1.GetEnumerator">
            <summary>
            Gets enumerator over items in the collection.
            </summary>
            <returns>The enumerator over items in the collection.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`1.Equals(DotNext.Collections.Generic.ReadOnlyCollectionView{`0})">
            <summary>
            Determines whether the current view and the specified view points
            to the same collection.
            </summary>
            <param name="other">Other view to compare.</param>
            <returns><see langword="true"/> if the current view points to the same collection as other view; otherwise, <see langword="false"/>.</returns>
            <remarks>
            Comparison between two wrapped collections is 
            performed using method <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`1.GetHashCode">
            <summary>
            Returns identity hash code of the wrapped collection.
            </summary>
            <returns>Identity hash code of the wrapped collection.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`1.Equals(System.Object)">
            <summary>
            Determines whether wrapped collection and the specified object 
            are equal by reference.
            </summary>
            <param name="other">Other collection to compare.</param>
            <returns><see langword="true"/>, if wrapped collection and the specified object are equal by reference; otherwise, <see lngword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`1.op_Equality(DotNext.Collections.Generic.ReadOnlyCollectionView{`0},DotNext.Collections.Generic.ReadOnlyCollectionView{`0})">
            <summary>
            Determines whether two views point to the same collection.
            </summary>
            <param name="first">The first view to compare.</param>
            <param name="second">The second view to compare.</param>
            <returns><see langword="true"/> if both views point to the same collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`1.op_Inequality(DotNext.Collections.Generic.ReadOnlyCollectionView{`0},DotNext.Collections.Generic.ReadOnlyCollectionView{`0})">
            <summary>
            Determines whether two views point to the different collections.
            </summary>
            <param name="first">The first view to compare.</param>
            <param name="second">The second view to compare.</param>
            <returns><see langword="true"/> if both views point to the different collections; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Collections.Generic.ReadOnlyCollectionView`2">
            <summary>
            Represents lazily converted read-only collection.
            </summary>
            <typeparam name="I">Type of items in the source collection.</typeparam>
            <typeparam name="O">Type of items in the converted collection.</typeparam>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0},System.Converter{`0,`1})">
            <summary>
            Initializes a new lazily converted view.
            </summary>
            <param name="collection">Read-only collection to convert.</param>
            <param name="mapper">Collection items converter.</param>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyCollectionView`2.Count">
            <summary>
            Count of items in the collection.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`2.GetEnumerator">
            <summary>
            Returns enumerator over converted items.
            </summary>
            <returns>The enumerator over converted items.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`2.Equals(DotNext.Collections.Generic.ReadOnlyCollectionView{`0,`1})">
            <summary>
            Determines whether two converted collections are same.
            </summary>
            <param name="other">Other collection to compare.</param>
            <returns><see langword="true"/> if this view wraps the same source collection and contains the same converter as other view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`2.GetHashCode">
            <summary>
            Returns hash code for the this view.
            </summary>
            <returns>The hash code of this view.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`2.Equals(System.Object)">
            <summary>
            Determines whether two converted collections are same.
            </summary>
            <param name="other">Other collection to compare.</param>
            <returns><see langword="true"/> if this view wraps the same source collection and contains the same converter as other view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`2.op_Equality(DotNext.Collections.Generic.ReadOnlyCollectionView{`0,`1},DotNext.Collections.Generic.ReadOnlyCollectionView{`0,`1})">
            <summary>
            Determines whether two collections are same.
            </summary>
            <param name="first">The first collection to compare.</param>
            <param name="second">The second collection to compare.</param>
            <returns><see langword="true"/> if the first view wraps the same source collection and contains the same converter as the second view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyCollectionView`2.op_Inequality(DotNext.Collections.Generic.ReadOnlyCollectionView{`0,`1},DotNext.Collections.Generic.ReadOnlyCollectionView{`0,`1})">
            <summary>
            Determines whether two collections are not same.
            </summary>
            <param name="first">The first collection to compare.</param>
            <param name="second">The second collection to compare.</param>
            <returns><see langword="true"/> if the first view wraps the diferent source collection and contains the different converter as the second view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Collections.Generic.ReadOnlyDictionaryView`2">
            <summary>
            Represents read-only view of the mutable dictionary.
            </summary>
            <typeparam name="K">Type of dictionary keys.</typeparam>
            <typeparam name="V">Type of dictionary values.</typeparam>
            <remarks>
            Any changes in the original dictionary are visible from the read-only view.
            </remarks>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new read-only view for the mutable dictionary.
            </summary>
            <param name="dictionary">A dictionary to wrap.</param>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.Item(`0)">
            <summary>
            Gets value associated with the key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The value associated with the key.</returns>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.Keys">
            <summary>
            All dictionary keys.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.Values">
            <summary>
            All dictionary values.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.Count">
            <summary>
            Count of key/value pairs in the dictionary.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.ContainsKey(`0)">
            <summary>
            Determines whether the wrapped dictionary contains an element
            with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><see langword="true"/> if the key exists in the wrapped dictionary; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.GetEnumerator">
            <summary>
            Gets enumerator over all key/value pairs in the dictionary.
            </summary>
            <returns>The enumerator over all key/value pairs in the dictionary.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.TryGetValue(`0,`1@)">
            <summary>
            Returns the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">The value associated with the specified key, if the
            key is found; otherwise, the <see langword="default"/> value for the type of the value parameter.
            This parameter is passed uninitialized.
            </param>
            <returns><see langword="true"/>, if the dictionary contains the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.Equals(DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1})">
            <summary>
            Determines whether the current view and the specified view points
            to the same dictionary.
            </summary>
            <param name="other">Other view to compare.</param>
            <returns><see langword="true"/> if the current view points to the same dictionary as other view; otherwise, <see langword="false"/>.</returns>
            <remarks>
            Comparison between two wrapped dictionaries is 
            performed using method <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.GetHashCode">
            <summary>
            Returns identity hash code of the wrapped collection.
            </summary>
            <returns>Identity hash code of the wrapped collection.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.Equals(System.Object)">
            <summary>
            Determines whether wrapped dictionary and the specified object 
            are equal by reference.
            </summary>
            <param name="other">Other dictionary to compare.</param>
            <returns><see langword="true"/>, if wrapped dictionary and the specified object are equal by reference; otherwise, <see lngword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.op_Equality(DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1},DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1})">
            <summary>
            Determines whether two views point to the same dictionary.
            </summary>
            <param name="first">The first view to compare.</param>
            <param name="second">The second view to compare.</param>
            <returns><see langword="true"/> if both views point to the same collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`2.op_Inequality(DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1},DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1})">
            <summary>
            Determines whether two views point to the different dictionaries.
            </summary>
            <param name="first">The first view to compare.</param>
            <param name="second">The second view to compare.</param>
            <returns><see langword="true"/> if both views point to the different dictionaries; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Collections.Generic.ReadOnlyDictionaryView`3">
            <summary>
            Represents lazily converted read-only dictionary.
            </summary>
            <typeparam name="K">Type of dictionary keys.</typeparam>
            <typeparam name="I">Type of values in the source dictionary.</typeparam>
            <typeparam name="O">Type of values in the converted dictionary.</typeparam>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.#ctor(System.Collections.Generic.IReadOnlyDictionary{`0,`1},System.Converter{`1,`2})">
            <summary>
            Initializes a new lazily converted view.
            </summary>
            <param name="dictionary">Read-only dictionary to convert.</param>
            <param name="mapper">Value converter.</param>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.Item(`0)">
            <summary>
            Gets value associated with the key and convert it.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The converted value associated with the key.</returns>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.Keys">
            <summary>
            All dictionary keys.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.Values">
            <summary>
            All converted dictionary values.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.Count">
            <summary>
            Count of key/value pairs.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.ContainsKey(`0)">
            <summary>
            Determines whether the wrapped dictionary contains an element
            with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><see langword="true"/> if the key exists in the wrapped dictionary; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.GetEnumerator">
            <summary>
            Returns enumerator over key/value pairs in the wrapped dictionary
            and performs conversion for each value in the pair.
            </summary>
            <returns>The enumerator over key/value pairs.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.TryGetValue(`0,`2@)">
            <summary>
            Returns the converted value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">The converted value associated with the specified key, if the
            key is found; otherwise, the <see langword="default"/> value for the type of the value parameter.
            This parameter is passed uninitialized.
            </param>
            <returns><see langword="true"/>, if the dictionary contains the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.Equals(DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1,`2})">
            <summary>
            Determines whether two converted dictionaries are same.
            </summary>
            <param name="other">Other dictionary to compare.</param>
            <returns><see langword="true"/> if this view wraps the same source dictionary and contains the same converter as other view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.GetHashCode">
            <summary>
            Returns hash code for the this view.
            </summary>
            <returns>The hash code of this view.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.Equals(System.Object)">
            <summary>
            Determines whether two converted dictionaries are same.
            </summary>
            <param name="other">Other dictionary to compare.</param>
            <returns><see langword="true"/> if this view wraps the same source dictionary and contains the same converter as other view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.op_Equality(DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1,`2},DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1,`2})">
            <summary>
            Determines whether two views are same.
            </summary>
            <param name="first">The first dictionary to compare.</param>
            <param name="second">The second dictionary to compare.</param>
            <returns><see langword="true"/> if the first view wraps the same source dictionary and contains the same converter as the second view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyDictionaryView`3.op_Inequality(DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1,`2},DotNext.Collections.Generic.ReadOnlyDictionaryView{`0,`1,`2})">
            <summary>
            Determines whether two views are not same.
            </summary>
            <param name="first">The first dictionary to compare.</param>
            <param name="second">The second collection to compare.</param>
            <returns><see langword="true"/> if the first view wraps the diferent source dictionary and contains the different converter as the second view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Collections.Generic.ReadOnlyListView`1">
            <summary>
            Represents read-only view of the mutable list.
            </summary>
            <typeparam name="T">Type of items in the list.</typeparam>
            <remarks>
            Any changes in the original list are visible from the read-only view.
            </remarks>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new read-only view for the specified mutable list.
            </summary>
            <param name="list">A list to wrap.</param>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyListView`1.Count">
            <summary>
            Number of items in the list.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyListView`1.Item(System.Int32)">
            <summary>
            Gets item at the specified position in the list.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>List item at the specified position.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`1.GetEnumerator">
            <summary>
            Gets enumerator over items in the list.
            </summary>
            <returns>The enumerator over items in the list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`1.Equals(DotNext.Collections.Generic.ReadOnlyListView{`0})">
            <summary>
            Determines whether the current view and the specified view points
            to the same list.
            </summary>
            <param name="other">Other view to compare.</param>
            <returns><see langword="true"/> if the current view points to the same list as other view; otherwise, <see langword="false"/>.</returns>
            <remarks>
            Comparison between two wrapped lists is 
            performed using method <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`1.GetHashCode">
            <summary>
            Returns identity hash code of the wrapped list.
            </summary>
            <returns>Identity hash code of the wrapped list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`1.Equals(System.Object)">
            <summary>
            Determines whether wrapped list and the specified object 
            are equal by reference.
            </summary>
            <param name="other">Other list to compare.</param>
            <returns><see langword="true"/>, if wrapped list and the specified object are equal by reference; otherwise, <see lngword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`1.op_Equality(DotNext.Collections.Generic.ReadOnlyListView{`0},DotNext.Collections.Generic.ReadOnlyListView{`0})">
            <summary>
            Determines whether two views point to the same list.
            </summary>
            <param name="first">The first view to compare.</param>
            <param name="second">The second view to compare.</param>
            <returns><see langword="true"/> if both views point to the same list; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`1.op_Inequality(DotNext.Collections.Generic.ReadOnlyListView{`0},DotNext.Collections.Generic.ReadOnlyListView{`0})">
            <summary>
            Determines whether two views point to the different lists.
            </summary>
            <param name="first">The first view to compare.</param>
            <param name="second">The second view to compare.</param>
            <returns><see langword="true"/> if both views point to the different lists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Collections.Generic.ReadOnlyListView`2">
            <summary>
            Represents lazily converted read-only list.
            </summary>
            <typeparam name="I">Type of items in the source list.</typeparam>
            <typeparam name="O">Type of items in the converted list.</typeparam>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`2.#ctor(System.Collections.Generic.IReadOnlyList{`0},System.Converter{`0,`1})">
            <summary>
            Initializes a new lazily converted view.
            </summary>
            <param name="list">Read-only list to convert.</param>
            <param name="mapper">List items converter.</param>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyListView`2.Item(System.Int32)">
            <summary>
            Gets item at the specified position.
            </summary>
            <param name="index">Zero-based index of the item.</param>
            <returns>Converted item at the specified position.</returns>
        </member>
        <member name="P:DotNext.Collections.Generic.ReadOnlyListView`2.Count">
            <summary>
            Count of items in the list.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`2.GetEnumerator">
            <summary>
            Returns enumerator over converted items.
            </summary>
            <returns>The enumerator over converted items.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`2.Equals(DotNext.Collections.Generic.ReadOnlyListView{`0,`1})">
            <summary>
            Determines whether two converted lists are same.
            </summary>
            <param name="other">Other list to compare.</param>
            <returns><see langword="true"/> if this view wraps the same source list and contains the same converter as other view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`2.GetHashCode">
            <summary>
            Returns hash code for the this list.
            </summary>
            <returns>The hash code of this list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`2.Equals(System.Object)">
            <summary>
            Determines whether two converted lists are same.
            </summary>
            <param name="other">Other list to compare.</param>
            <returns><see langword="true"/> if this collection wraps the same source collection and contains the same converter as other collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`2.op_Equality(DotNext.Collections.Generic.ReadOnlyListView{`0,`1},DotNext.Collections.Generic.ReadOnlyListView{`0,`1})">
            <summary>
            Determines whether two views are same.
            </summary>
            <param name="first">The first list view to compare.</param>
            <param name="second">The second list view to compare.</param>
            <returns><see langword="true"/> if the first view wraps the same source collection and contains the same converter as the second view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.ReadOnlyListView`2.op_Inequality(DotNext.Collections.Generic.ReadOnlyListView{`0,`1},DotNext.Collections.Generic.ReadOnlyListView{`0,`1})">
            <summary>
            Determines whether two views are not same.
            </summary>
            <param name="first">The first list view to compare.</param>
            <param name="second">The second list view to compare.</param>
            <returns><see langword="true"/> if the first view wraps the diferent source collection and contains the different converter as the second view; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Collections.Generic.Stack">
            <summary>
            Provides various extension methods for class <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.Stack.Clone``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Creates a clone of the stack preserving order of elements into it.
            </summary>
            <typeparam name="T">Type of elements in the stack.</typeparam>
            <param name="original">The stack to clone.</param>
            <returns>A cloned stack.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Stack.TryPeek``1(System.Collections.Generic.Stack{``0},``0@)">
            <summary>
            Attempts to obtain an object at the top of the stack without removing it.
            </summary>
            <param name="stack">Stack instance.</param>
            <param name="obj">An object at the top of the stack.</param>
            <typeparam name="T">The type of elements in the stack.</typeparam>
            <returns><see langword="true"/> if stack is not empty and object at the top of the stack exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.Stack.TryPop``1(System.Collections.Generic.Stack{``0},``0@)">
            <summary>
            Attempts to remove object at the top of the stack.
            </summary>
            <param name="stack">Stack instance.</param>
            <param name="obj">An object at the top of the stack.</param>
            <typeparam name="T">The type of elements in the stack.</typeparam>
            <returns><see langword="true"/> if stack is not empty and object at the top of the stack exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Comparable">
            <summary>
            Provides generic methods to work with comparable values.
            </summary>
        </member>
        <member name="M:DotNext.Comparable.Min``1(``0,``0,System.Comparison{``0})">
            <summary>
            Returns the smaller of two values.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="comparer">Comparison function.</param>
            <returns>The smaller of two values.</returns>
        </member>
        <member name="M:DotNext.Comparable.Min``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the smaller of two values.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="comparer">Comparison function.</param>
            <returns>The smaller of two values.</returns>
        </member>
        <member name="M:DotNext.Comparable.Min``1(``0,``0)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The smaller of two values.</returns>
        </member>
        <member name="M:DotNext.Comparable.Max``1(``0,``0,System.Comparison{``0})">
            <summary>
            Returns the larger of two values.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="comparer">Comparison function.</param>
            <returns>The larger of two values.</returns>       
        </member>
        <member name="M:DotNext.Comparable.Max``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the larger of two values.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="comparer">Comparison function.</param>
            <returns>The larger of two values.</returns>       
        </member>
        <member name="M:DotNext.Comparable.Max``1(``0,``0)">
            <summary>
            Returns the larger of two values.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The larger of two values.</returns>
        </member>
        <member name="T:DotNext.Converter">
            <summary>
            Provides extension methods for delegate <see cref="T:System.Converter`2"/> and
            predefined converters.
            </summary>
        </member>
        <member name="M:DotNext.Converter.Identity``2">
            <summary>
            The converter which returns input argument
            without any modifications.
            </summary>
            <typeparam name="I">Type of input.</typeparam>
            <typeparam name="O">Type of output.</typeparam>
            <returns>The identity function.</returns>
            <remarks>
            This method returns the same instance of predicate on every call.
            </remarks>
        </member>
        <member name="M:DotNext.Converter.Identity``1">
            <summary>
            The converter which returns input argument
            without any modifications.
            </summary>
            <typeparam name="T">Type of input and output.</typeparam>
            <returns>The identity function.</returns>
            <remarks>
            This method returns the same instance of predicate on every call.
            </remarks>
        </member>
        <member name="M:DotNext.Converter.AsFunc``2(System.Converter{``0,``1})">
            <summary>
            Converts <see cref="T:System.Converter`2"/> into <see cref="T:System.Func`2"/>.
            </summary>
            <typeparam name="I">Type of input argument.</typeparam>
            <typeparam name="O">Return type of the function.</typeparam>
            <param name="converter">The converted delegate.</param>
            <returns>A delegate of type <see cref="T:System.Func`2"/> referencing the same method as original delegate.</returns>
        </member>
        <member name="M:DotNext.Converter.AsPredicate``1(System.Converter{``0,System.Boolean})">
            <summary>
            Converts <see cref="T:System.Converter`2"/> into predicate.
            </summary>
            <typeparam name="T">Type of predicate argument.</typeparam>
            <param name="converter">A delegate to convert.</param>
            <returns>A delegate of type <see cref="T:System.Predicate`1"/> referencing the same method as original delegate.</returns>
        </member>
        <member name="T:DotNext.DelegateHelpers">
            <summary>
            Represents various extensions of delegates.
            </summary>
        </member>
        <member name="M:DotNext.DelegateHelpers.Contravariant``2(System.EventHandler{``0})">
            <summary>
            Performs contravariant conversion
            of actual generic argument specified
            for <see cref="T:System.EventHandler`1"/> type.
            </summary>
            <typeparam name="I">Input type of the delegate.</typeparam>
            <typeparam name="O">A subtype of <typeparamref name="I"/>.</typeparam>
            <param name="handler">The handler to convert.</param>
            <returns>The delegate referencing the same method as original delegate.</returns>
            <remarks>
            Generic parameter of delegate <see cref="T:System.EventHandler`1"/>
            is not marked as <see langword="in"/> so compiler doesn't
            support contravariant conversion for it. This method
            provides contravariant conversion for this delegate type.
            </remarks>
        </member>
        <member name="M:DotNext.DelegateHelpers.CreateDelegate``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates a delegate of the specified type with the specified target from this method.
            </summary>
            <typeparam name="D">The type of the delegate to create.</typeparam>
            <param name="method">The method to be wrapped into delegate.</param>
            <param name="target">The object targeted by the delegate.</param>
            <returns>The delegate for the specified method.</returns>
            <seealso cref="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)"/>
        </member>
        <member name="M:DotNext.DelegateHelpers.ChangeType``1(System.Delegate)">
            <summary>
            Returns a new delegate of different type which
            points to the same method as original delegate.
            </summary>
            <param name="d">Delegate to convert.</param>
            <typeparam name="D">A new delegate type.</typeparam>
            <returns>A method wrapped into new delegate type.</returns>
            <exception cref="T:System.ArgumentException">Cannot convert delegate type.</exception>
        </member>
        <member name="T:DotNext.Disposable">
            <summary>
            Provides implementation of dispose pattern.
            </summary>
            <see cref="T:System.IDisposable"/>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose">Implementing Dispose method</seealso>
        </member>
        <member name="P:DotNext.Disposable.IsDisposed">
            <summary>
            Indicates that this object is disposed.
            </summary>
        </member>
        <member name="M:DotNext.Disposable.ThrowIfDisposed">
            <summary>
            Throws exception if this object is disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object is disposed.</exception>
        </member>
        <member name="M:DotNext.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases managed and unmanaged resources associated with this object.
            </summary>
            <param name="disposing"><see langword="true"/> if called from <see cref="M:DotNext.Disposable.Dispose"/>; <see langword="false"/> if called from finalizer <see cref="M:DotNext.Disposable.Finalize"/>.</param>
        </member>
        <member name="M:DotNext.Disposable.Dispose">
            <summary>
            Releases all resources associated with this object.
            </summary>
        </member>
        <member name="M:DotNext.Disposable.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Disposes many objects in safe manner.
            </summary>
            <remarks>
            This method calls <see cref="M:System.IDisposable.Dispose"/> for every
            object even if one of them throws exception.
            All exceptions will be combined into single one and raised again.
            </remarks>
            <param name="objects">An array of objects to dispose.</param>
            <exception cref="T:System.AggregateException">One or more objects throw exception in dispose.</exception>
        </member>
        <member name="M:DotNext.Disposable.Dispose(System.IDisposable[])">
            <summary>
            Disposes many objects in safe manner.
            </summary>
            <param name="objects">An array of objects to dispose.</param>
        </member>
        <member name="M:DotNext.Disposable.Finalize">
            <summary>
            Finalizes this object.
            </summary>
        </member>
        <member name="T:DotNext.Enum`1">
            <summary>
            Provides strongly typed way to reflect enum type.
            </summary>
            <typeparam name="E">Enum type to reflect.</typeparam>
        </member>
        <member name="F:DotNext.Enum`1.MaxValue">
            <summary>
            Maximum enum value.
            </summary>
        </member>
        <member name="F:DotNext.Enum`1.MinValue">
            <summary>
            Minimum enum value.
            </summary>
        </member>
        <member name="P:DotNext.Enum`1.UnderlyingType">
            <summary>
            Gets the underlying type of the specified enumeration.
            </summary>
        </member>
        <member name="P:DotNext.Enum`1.Names">
            <summary>
            Gets mapping between enum value name and its actual value.
            </summary>
        </member>
        <member name="P:DotNext.Enum`1.Values">
            <summary>
            Gets mapping between enum actual value and its name.
            </summary>
        </member>
        <member name="M:DotNext.Enum`1.op_Implicit(DotNext.Enum{`0})~`0">
            <summary>
            Converts typed enum wrapper into actual enum value.
            </summary>
            <param name="en">Enum wrapper to convert.</param>
        </member>
        <member name="M:DotNext.Enum`1.op_Implicit(`0)~DotNext.Enum{`0}">
            <summary>
            Wraps enum value.
            </summary>
            <param name="value">The value to wrap.</param>
        </member>
        <member name="M:DotNext.Enum`1.CompareTo(`0)">
            <summary>
            Compares this enum value with other.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="M:DotNext.Enum`1.Equals(`0)">
            <summary>
            Determines whether this value equals to the other enum value.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns>Equality check result.</returns>
        </member>
        <member name="M:DotNext.Enum`1.Equals(System.Object)">
            <summary>
            Determines whether this value equals to the other enum value.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns>Equality check result.</returns>
        </member>
        <member name="M:DotNext.Enum`1.GetHashCode">
            <summary>
            Gets hash code of the enum value.
            </summary>
            <returns>The hash code of the enum value.</returns>
        </member>
        <member name="M:DotNext.Enum`1.ToString">
            <summary>
            Returns textual representation of the enum value.
            </summary>
            <returns>The textual representation of the enum value.</returns>
        </member>
        <member name="T:DotNext.Func">
            <summary>
            Provides extension methods for delegate <see cref="T:System.Func`1"/> and
            predefined functions.
            </summary>
        </member>
        <member name="M:DotNext.Func.Identity``2">
            <summary>
            The function which returns input argument
            without any modifications.
            </summary>
            <typeparam name="I">Type of input.</typeparam>
            <typeparam name="O">Type of output.</typeparam>
            <returns>The identity function.</returns>
            <remarks>
            This method returns the same instance of predicate on every call.
            </remarks>
        </member>
        <member name="M:DotNext.Func.Identity``1">
            <summary>
            The converter which returns input argument
            without any modifications.
            </summary>
            <typeparam name="T">Type of input and output.</typeparam>
            <returns>The identity function.</returns>
            <remarks>
            This method returns the same instance of predicate on every call.
            </remarks>
        </member>
        <member name="M:DotNext.Func.AsPredicate``1(System.Func{``0,System.Boolean})">
            <summary>
            Converts <see cref="T:System.Func`2"/> into predicate.
            </summary>
            <typeparam name="T">Type of predicate argument.</typeparam>
            <param name="predicate">A delegate to convert.</param>
            <returns>A delegate of type <see cref="T:System.Predicate`1"/> referencing the same method as original delegate.</returns>
        </member>
        <member name="M:DotNext.Func.AsConverter``2(System.Func{``0,``1})">
            <summary>
            Converts <see cref="T:System.Func`2"/> into <see cref="T:System.Converter`2"/>.
            </summary>
            <typeparam name="I">Type of input argument.</typeparam>
            <typeparam name="O">Return type of the converter.</typeparam>
            <param name="function">The function to convert.</param>
            <returns>A delegate of type <see cref="T:System.Converter`2"/> referencing the same method as original delegate.</returns>
        </member>
        <member name="T:DotNext.Generic.BooleanConst">
            <summary>
            Represents boolean constant as generic parameter.
            </summary>
        </member>
        <member name="T:DotNext.Generic.BooleanConst.True">
            <summary>
            Represents <see langword="true"/> constant value as generic parameter.
            </summary>
        </member>
        <member name="M:DotNext.Generic.BooleanConst.True.#ctor">
            <summary>
            Initializes a new constant value.
            </summary>
        </member>
        <member name="T:DotNext.Generic.BooleanConst.False">
            <summary>
            Represents <see langword="false"/> constant value as generic parameter.
            </summary>
        </member>
        <member name="M:DotNext.Generic.BooleanConst.False.#ctor">
            <summary>
            Initializes a new constant value.
            </summary>
        </member>
        <member name="T:DotNext.Generic.Constant`1">
            <summary>
            Allows to use constant values as generic parameters.
            </summary>
            <remarks>
            Derived class must be sealed or abstract. If class is sealed
            then it should have at least one constructor without parameters.
            </remarks>
            <typeparam name="T">Type of constant to be passed as generic parameter.</typeparam>
        </member>
        <member name="M:DotNext.Generic.Constant`1.#ctor(`0)">
            <summary>
            Initializes a new generic-level constant.
            </summary>
            <param name="constVal">Constant value.</param>
        </member>
        <member name="M:DotNext.Generic.Constant`1.ToString">
            <summary>
            Returns textual representation of the constant value.
            </summary>
            <returns>The textual representation of the constant value.</returns>
        </member>
        <member name="M:DotNext.Generic.Constant`1.GetHashCode">
            <summary>
            Computes hash code for the constant.
            </summary>
            <returns>The hash code of the constant.</returns>
        </member>
        <member name="M:DotNext.Generic.Constant`1.Equals(System.Object)">
            <summary>
            Determines whether two constant values are equal.
            </summary>
            <param name="other">Other constant value to compare.</param>
            <returns><see langword="true"/>, this object represents the same constant value as other; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Generic.Constant`1.op_Implicit(DotNext.Generic.Constant{`0})~`0">
            <summary>
            Extracts constant value.
            </summary>
            <param name="const">The constant value holder.</param>
        </member>
        <member name="M:DotNext.Generic.Constant`1.Of``1(System.Boolean)">
            <summary>
            Extracts constant value from generic parameter.
            </summary>
            <param name="intern"><see langword="true"/> to return interned constant value; otherwise, <see langword="false"/>.</param>
            <typeparam name="G">A type representing a constant value.</typeparam>
            <returns>Constant value extracted from generic.</returns>
        </member>
        <member name="T:DotNext.Generic.IntConst">
            <summary>
            Represents <see cref="T:System.Int32"/> constant as type.
            </summary>
        </member>
        <member name="M:DotNext.Generic.IntConst.#ctor(System.Int32)">
            <summary>
            Associated <see cref="T:System.Int32"/> value with this type.
            </summary>
            <param name="value">A value to be associated with this type.</param>
        </member>
        <member name="T:DotNext.Generic.IntConst.Zero">
            <summary>
            Represents zero value as type.
            </summary>
        </member>
        <member name="F:DotNext.Generic.IntConst.Zero.Value">
            <summary>
            Represents constant value.
            </summary>
        </member>
        <member name="M:DotNext.Generic.IntConst.Zero.#ctor">
            <summary>
            Initializes a new constant value.
            </summary>
        </member>
        <member name="T:DotNext.Generic.IntConst.Max">
            <summary>
            Represents max integer value as type.
            </summary>
        </member>
        <member name="F:DotNext.Generic.IntConst.Max.Value">
            <summary>
            Represents constant value.
            </summary>
        </member>
        <member name="M:DotNext.Generic.IntConst.Max.#ctor">
            <summary>
            Initializes a new constant value.
            </summary>
        </member>
        <member name="T:DotNext.Generic.IntConst.Min">
            <summary>
            Represents min integer value as type.
            </summary>
        </member>
        <member name="F:DotNext.Generic.IntConst.Min.Value">
            <summary>
            Represents constant value.
            </summary>
        </member>
        <member name="M:DotNext.Generic.IntConst.Min.#ctor">
            <summary>
            Initializes a new constant value.
            </summary>
        </member>
        <member name="T:DotNext.Generic.LongConst">
            <summary>
            Represents <see cref="T:System.Int64"/> constant as type.
            </summary>
        </member>
        <member name="M:DotNext.Generic.LongConst.#ctor(System.Int64)">
            <summary>
            Associated <see cref="T:System.Int64"/> value with this type.
            </summary>
            <param name="value">A value to be associated with this type.</param>
        </member>
        <member name="T:DotNext.Generic.LongConst.Zero">
            <summary>
            Represents zero value as type.
            </summary>
        </member>
        <member name="F:DotNext.Generic.LongConst.Zero.Value">
            <summary>
            Represents constant value.
            </summary>
        </member>
        <member name="M:DotNext.Generic.LongConst.Zero.#ctor">
            <summary>
            Initializes a new constant value.
            </summary>
        </member>
        <member name="T:DotNext.Generic.LongConst.Max">
            <summary>
            Represents max long value as type.
            </summary>
        </member>
        <member name="F:DotNext.Generic.LongConst.Max.Value">
            <summary>
            Represents constant value.
            </summary>
        </member>
        <member name="M:DotNext.Generic.LongConst.Max.#ctor">
            <summary>
            Initializes a new constant value.
            </summary>
        </member>
        <member name="T:DotNext.Generic.LongConst.Min">
            <summary>
            Represents min long value as type.
            </summary>
        </member>
        <member name="F:DotNext.Generic.LongConst.Min.Value">
            <summary>
            Represents constant value.
            </summary>
        </member>
        <member name="M:DotNext.Generic.LongConst.Min.#ctor">
            <summary>
            Initializes a new constant value.
            </summary>
        </member>
        <member name="T:DotNext.Generic.StringConst">
            <summary>
            Represents string constant as generic parameter.
            </summary>
        </member>
        <member name="M:DotNext.Generic.StringConst.#ctor(System.String)">
            <summary>
            Initializes string constant.
            </summary>
            <param name="value">Constant value.</param>
        </member>
        <member name="T:DotNext.Generic.StringConst.Null">
            <summary>
            Represents <see langword="null"/> as string constant.
            </summary>
        </member>
        <member name="F:DotNext.Generic.StringConst.Null.Value">
            <summary>
            Represents constant value.
            </summary>
        </member>
        <member name="M:DotNext.Generic.StringConst.Null.#ctor">
            <summary>
            Initializes a new <see langword="null"/> string constant.
            </summary>
        </member>
        <member name="T:DotNext.Generic.StringConst.Empty">
            <summary>
            Represents empty string constant.
            </summary>
        </member>
        <member name="F:DotNext.Generic.StringConst.Empty.Value">
            <summary>
            Represents constant value.
            </summary>
        </member>
        <member name="M:DotNext.Generic.StringConst.Empty.#ctor">
            <summary>
            Creates empty string constant.
            </summary>
        </member>
        <member name="T:DotNext.GenericArgumentException">
            <summary>
            The exception that is thrown when one of the generic arguments 
            provided to a type is not valid.
            </summary>
        </member>
        <member name="M:DotNext.GenericArgumentException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new exception.
            </summary>
            <param name="genericParam">Incorrect actual generic argument.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of generic parameter.</param>
        </member>
        <member name="P:DotNext.GenericArgumentException.Argument">
            <summary>
            Generic argument.
            </summary>
        </member>
        <member name="T:DotNext.GenericArgumentException`1">
            <summary>
            The exception that is thrown when one of the generic arguments 
            provided to a type is not valid.
            </summary>
            <typeparam name="G">Captured generic argument treated as invalid.</typeparam>
        </member>
        <member name="M:DotNext.GenericArgumentException`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of generic parameter.</param>
        </member>
        <member name="T:DotNext.IOptional">
            <summary>
            Indicates that content of the implementing class or struct 
            doesn't have meaningful payload.
            </summary>
            <remarks>It is recommended to implement this interface explicitly.</remarks>
        </member>
        <member name="P:DotNext.IOptional.IsPresent">
            <summary>
            Indicates that this object has meaningful payload.
            </summary>
        </member>
        <member name="T:DotNext.ItemAction`2">
            <summary>
            Represents item indexer delegate which can be used
            to read and modify collection element during iteration.
            </summary>
            <typeparam name="I">Type of item index.</typeparam>
            <typeparam name="V">Type of collection element.</typeparam>
            <param name="index">Element index.</param>
            <param name="element">Mutable managed pointer to array element.</param>
        </member>
        <member name="T:DotNext.ObjectExtensions">
            <summary>
            Various extension methods for reference types.
            </summary>
        </member>
        <member name="M:DotNext.ObjectExtensions.GetUserData``1(``0)">
            <summary>
            Provides ad-hoc approach to associate some data with the object
            without modification of it.
            </summary>
            <remarks>
            This method allows to associate arbitrary user data with any object.
            User data storage is not a part of object type declaration.
            Modification of user data doesn't cause modification of internal state of the object.
            The storage is associated with the object reference.
            Any user data are transient and can't be passed across process boundaries (i.e. serialization is not supported)
            </remarks>
            <param name="obj">Target object.</param>
            <returns>User data storage.</returns>
        </member>
        <member name="M:DotNext.ObjectExtensions.IsOneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the specified object is equal to one
            of the specified objects.
            </summary>
            <remarks>
            This method uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/>
            to check equality between two objects.
            </remarks>
            <typeparam name="T">The type of object to compare.</typeparam>
            <param name="value">The object to compare with other.</param>
            <param name="values">Candidate objects.</param>
            <returns><see langword="true"/>, if <paramref name="value"/> is equal to one of <paramref name="values"/>.</returns>
        </member>
        <member name="M:DotNext.ObjectExtensions.IsOneOf``1(``0,``0[])">
            <summary>
            Checks whether the specified object is equal to one
            of the specified objects.
            </summary>
            <remarks>
            This method uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/>
            to check equality between two objects.
            </remarks>
            <typeparam name="T">The type of object to compare.</typeparam>
            <param name="value">The object to compare with other.</param>
            <param name="values">Candidate objects.</param>
            <returns><see langword="true"/>, if <paramref name="value"/> is equal to one of <paramref name="values"/>.</returns>
        </member>
        <member name="M:DotNext.ObjectExtensions.Decompose``3(``0,System.Func{``0,``1},System.Func{``0,``2},``1@,``2@)">
            <summary>
            Performs decomposition of object into two values.
            </summary>
            <typeparam name="T">Type of object to decompose.</typeparam>
            <typeparam name="R1">Type of the first decomposition result.</typeparam>
            <typeparam name="R2">Type of the second decomposition result.</typeparam>
            <param name="obj">An object to decompose.</param>
            <param name="decomposer1">First decomposition function.</param>
            <param name="decomposer2">Second decomposition function.</param>
            <param name="result1">First decomposition result.</param>
            <param name="result2">Second decomposition result.</param>
        </member>
        <member name="M:DotNext.ObjectExtensions.Decompose``3(``0,System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Performs decomposition of object into tuple.
            </summary>
            <typeparam name="T">Type of object to decompose.</typeparam>
            <typeparam name="R1">Type of the first decomposition result.</typeparam>
            <typeparam name="R2">Type of the second decomposition result.</typeparam>
            <param name="obj">An object to decompose.</param>
            <param name="decomposer1">First decomposition function.</param>
            <param name="decomposer2">Second decomposition function.</param>
            <returns>Decomposition result.</returns>
        </member>
        <member name="T:DotNext.OneDimensionalArray">
            <summary>
            Provides specialized methods to work with one-dimensional array.
            </summary>
        </member>
        <member name="M:DotNext.OneDimensionalArray.IsNullOrEmpty``1(``0[])">
            <summary>
            Indicates that array is <see langword="null"/> or empty.
            </summary>
            <typeparam name="T">Type of elements in the array.</typeparam>
            <param name="array">The array to check.</param>
            <returns><see langword="true"/>, if array is <see langword="null"/> or empty.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.ForEach``1(``0[],DotNext.ItemAction{System.Int64,``0})">
            <summary>
            Applies specific action to each array element.
            </summary>
            <remarks>
            This method support modification of array elements
            because each array element is passed by reference into action.
            </remarks>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="array">An array to iterate.</param>
            <param name="action">An action to be applied for each element.</param>
        </member>
        <member name="M:DotNext.OneDimensionalArray.Insert``1(``0[],``0,System.Int64)">
            <summary>
            Insert a new element into array and return modified array.
            </summary>
            <typeparam name="T">Type of array element.</typeparam>
            <param name="array">Source array. Cannot be <see langword="null"/>.</param>
            <param name="element">The zero-based index at which item should be inserted.</param>
            <param name="index">The object to insert. The value can be null for reference types.</param>
            <returns>A modified array with inserted element.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.Convert``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts each array element from one type into another.
            </summary>
            <typeparam name="I">Type of source array elements.</typeparam>
            <typeparam name="O">Type of target array elements.</typeparam>
            <param name="input">Input array to be converted. Cannot be <see langword="null"/>.</param>
            <param name="mapper">Mapping function. Cannot be <see langword="null"/>.</param>
            <returns>Converted array.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.Convert``2(``0[],System.Func{System.Int64,``0,``1})">
            <summary>
            Converts each array element from one type into another.
            </summary>
            <typeparam name="I">Type of source array elements.</typeparam>
            <typeparam name="O">Type of target array elements.</typeparam>
            <param name="input">Input array to be converted. Cannot be <see langword="null"/>.</param>
            <param name="mapper">Index-aware mapping function. Cannot be <see langword="null"/>.</param>
            <returns>Converted array.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.New``1(System.Int64)">
            <summary>
            Allocates a new one-dimensional array, or return cached empty array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="length">Length of the array.</param>
            <returns>Allocated array.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.RemoveFirst``1(``0[],System.Int64)">
            <summary>
            Removes the specified number of elements from the beginning of the array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="input">Source array.</param>
            <param name="count">A number of elements to be removed.</param>
            <returns>Modified array.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.Slice``1(``0[],System.Int64,System.Int64)">
            <summary>
            Returns sub-array.
            </summary>
            <param name="input">Input array. Cannot be <see langword="null"/>.</param>
            <param name="startIndex">The index at which to begin this slice.</param>
            <param name="length">The desired length for the slice.</param>
            <typeparam name="T">Type of array elements.</typeparam>
            <returns>A new sliced array.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.RemoveLast``1(``0[],System.Int64)">
            <summary>
            Removes the specified number of elements from the end of the array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="input">Source array.</param>
            <param name="count">A number of elements to be removed.</param>
            <returns>Modified array.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.SequenceEqual``1(``0[],``0[])">
            <summary>
            Determines whether two arrays contain the same set of elements.
            </summary>
            <remarks>
            This method calls <see cref="M:System.IEquatable`1.Equals(`0)"/> for each element type.
            </remarks>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="first">First array for equality check.</param>
            <param name="second">Second array for equality check.</param>
            <returns><see langword="true"/>, if both arrays are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.BitwiseEquals``1(``0[],``0[])">
            <summary>
            Determines whether two arrays contain the same set of bits.
            </summary>
            <remarks>
            This method performs bitwise equality between each pair of elements.
            </remarks>
            <typeparam name="T">Type of array elements. Should be unmanaged value type.</typeparam>
            <param name="first">First array for equality check.</param>
            <param name="second">Second array of equality check.</param>
            <returns><see langword="true"/>, if both arrays are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.BitwiseHashCode``1(``0[],System.Boolean)">
            <summary>
            Computes bitwise hash code for the array content.
            </summary>
            <typeparam name="T">The type of array elements.</typeparam>
            <param name="array">The array to be hashed.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>The hash code of the array content.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.BitwiseHashCode``1(``0[],System.Int32,System.Func{System.Int32,System.Int32,System.Int32},System.Boolean)">
            <summary>
            Computes bitwise hash code for the array content
            and custom hash function.
            </summary>
            <typeparam name="T">The type of array elements.</typeparam>
            <param name="array">The array to be hashed.</param>
            <param name="hash">Initial value of the hash.</param>
            <param name="hashFunction">Custom hashing algorithm.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>The hash code of the array content.</returns>
        </member>
        <member name="M:DotNext.OneDimensionalArray.BitwiseCompare``1(``0[],``0[])">
            <summary>
            Compares content of the two arrays.
            </summary>
            <typeparam name="T">The type of array elements.</typeparam>
            <param name="first">The first array to compare.</param>
            <param name="second">The second array to compare.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="T:DotNext.Optional">
            <summary>
            Various extension and factory methods for constructing optional value.
            </summary>
        </member>
        <member name="M:DotNext.Optional.Or``1(System.Threading.Tasks.Task{DotNext.Optional{``0}},``0)">
            <summary>
            Returns the value if present; otherwise return default value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="task">The task returning optional value.</param>
            <param name="defaultValue">The value to be returned if there is no value present.</param>
            <returns>The value, if present, otherwise default</returns>
        </member>
        <member name="M:DotNext.Optional.Convert``2(System.Threading.Tasks.Task{DotNext.Optional{``0}},System.Converter{``0,``1})">
            <summary>
            If a value is present, apply the provided mapping function to it, and if the result is 
            non-null, return an Optional describing the result. Otherwise returns <see cref="P:DotNext.Optional`1.Empty"/>.
            </summary>
            <typeparam name="I">The type of stored in the Optional container.</typeparam>
            <typeparam name="O">The type of the result of the mapping function.</typeparam>
            <param name="task">The task containing Optional value.</param>
            <param name="converter">A mapping function to be applied to the value, if present.</param>
            <returns>An Optional describing the result of applying a mapping function to the value of this Optional, if a value is present, otherwise <see cref="P:DotNext.Optional`1.Empty"/>.</returns>
        </member>
        <member name="M:DotNext.Optional.OrThrow``2(System.Threading.Tasks.Task{DotNext.Optional{``0}})">
            <summary>
            If a value is present, returns the value, otherwise throw exception.
            </summary>
            <param name="task">The task returning optional value.</param>
            <typeparam name="T">Type of the value.</typeparam>
            <typeparam name="E">Type of exception to throw.</typeparam>
            <returns>The value, if present.</returns>
        </member>
        <member name="M:DotNext.Optional.OrThrow``2(System.Threading.Tasks.Task{DotNext.Optional{``0}},System.Func{``1})">
            <summary>
            If a value is present, returns the value, otherwise throw exception.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <typeparam name="E">Type of exception to throw.</typeparam>
            <param name="task">The task returning optional value.</param>
            <param name="exceptionFactory">Exception factory.</param>
            <returns>The value, if present.</returns>
        </member>
        <member name="M:DotNext.Optional.OrInvoke``1(System.Threading.Tasks.Task{DotNext.Optional{``0}},System.Func{``0})">
            <summary>
            Returns the value if present; otherwise invoke delegate.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="task">The task returning optional value.</param>
            <param name="defaultFunc">A delegate to be invoked if value is not present.</param>
            <returns>The value, if present, otherwise returned from delegate.</returns>
        </member>
        <member name="M:DotNext.Optional.OrDefault``1(System.Threading.Tasks.Task{DotNext.Optional{``0}})">
            <summary>
            If a value is present, returns the value, otherwise return default value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="task">The task returning optional value.</param>
            <returns>The value, if present, otherwise default</returns>
        </member>
        <member name="M:DotNext.Optional.If``1(System.Threading.Tasks.Task{DotNext.Optional{``0}},System.Predicate{``0})">
            <summary>
            If a value is present, and the value matches the given predicate, 
            return an Optional describing the value, otherwise return an empty Optional.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="task">The task returning optional value.</param>
            <param name="condition">A predicate to apply to the value, if present.</param>
            <returns>An Optional describing the value of this Optional if a value is present and the value matches the given predicate, otherwise an empty Optional</returns>
        </member>
        <member name="M:DotNext.Optional.IsOptional(System.Type)">
            <summary>
            Indicates that specified type is optional type.
            </summary>
            <returns><see langword="true"/>, if specified type is optional type; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type argument of the specified optional type.
            </summary>
            <param name="optionalType">Optional type.</param>
            <returns>Underlying type argument of optional type; otherwise, null.</returns>
        </member>
        <member name="M:DotNext.Optional.ToOptional``1(System.Nullable{``0}@)">
            <summary>
            Constructs optional value from nullable reference type.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The value wrapped into Optional container.</returns>
        </member>
        <member name="M:DotNext.Optional.EmptyIfNull``1(``0)">
            <summary>
            Converts value of reference type into Optional value.
            </summary>
            <param name="value">The value to convert. May be <see langword="null"/>.</param>
            <typeparam name="T">Type of object to convert.</typeparam>
            <returns>A value converted into Optional container.</returns>
        </member>
        <member name="M:DotNext.Optional.OrNull``1(DotNext.Optional{``0}@)">
            <summary>
            If a value is present, returns the value, otherwise null.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="value">Optional value.</param>
            <returns>Nullable value.</returns>
        </member>
        <member name="M:DotNext.Optional.Coalesce``1(DotNext.Optional{``0}@,DotNext.Optional{``0}@)">
            <summary>
            Returns second value if first is empty.
            </summary>
            <param name="first">The first optional value.</param>
            <param name="second">The second optional value.</param>
            <typeparam name="T">Type of value.</typeparam>
            <returns></returns>
        </member>
        <member name="T:DotNext.Optional`1">
            <summary>
            A container object which may or may not contain a value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
        </member>
        <member name="F:DotNext.Optional`1.HasValueChecker">
            <summary>
            Highly optimized checker of the content.
            </summary>
        </member>
        <member name="M:DotNext.Optional`1.#ctor(`0)">
            <summary>
            Constructs non-empty container.
            </summary>
            <param name="value">A value to be placed into container.</param>
        </member>
        <member name="P:DotNext.Optional`1.Empty">
            <summary>
            Represents optional container without value.
            </summary>
        </member>
        <member name="P:DotNext.Optional`1.IsPresent">
            <summary>
            Indicates whether the value is present.
            </summary>
        </member>
        <member name="M:DotNext.Optional`1.HasValue(`0@)">
            <summary>
            Indicates that specified value has meaningful content.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if value has meaningful content; otherwise, false.</returns>
        </member>
        <member name="M:DotNext.Optional`1.TryGet(`0@)">
            <summary>
            Attempts to extract value from container if it is present.
            </summary>
            <param name="value">Extracted value.</param>
            <returns><see langword="true"/> if value is present; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.Or(`0)">
            <summary>
            Returns the value if present; otherwise return default value.
            </summary>
            <param name="defaultValue">The value to be returned if there is no value present.</param>
            <returns>The value, if present, otherwise default</returns>
        </member>
        <member name="M:DotNext.Optional`1.OrThrow``1">
            <summary>
            If a value is present, returns the value, otherwise throw exception.
            </summary>
            <typeparam name="E">Type of exception to throw.</typeparam>
            <returns>The value, if present.</returns>
        </member>
        <member name="M:DotNext.Optional`1.OrThrow``1(System.Func{``0})">
            <summary>
            If a value is present, returns the value, otherwise throw exception.
            </summary>
            <typeparam name="E"></typeparam>
            <param name="exceptionFactory">Exception factory.</param>
            <returns>The value, if present.</returns>
        </member>
        <member name="M:DotNext.Optional`1.OrInvoke(System.Func{`0})">
            <summary>
            Returns the value if present; otherwise invoke delegate.
            </summary>
            <param name="defaultFunc">A delegate to be invoked if value is not present.</param>
            <returns>The value, if present, otherwise returned from delegate.</returns>
        </member>
        <member name="M:DotNext.Optional`1.OrDefault">
            <summary>
            If a value is present, returns the value, otherwise return default value.
            </summary>
            <returns>The value, if present, otherwise default</returns>
        </member>
        <member name="P:DotNext.Optional`1.Value">
            <summary>
            If a value is present, returns the value, otherwise throw exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">No value is present.</exception>
        </member>
        <member name="M:DotNext.Optional`1.Convert``1(System.Converter{`0,``0})">
            <summary>
            If a value is present, apply the provided mapping function to it, and if the result is 
            non-null, return an Optional describing the result. Otherwise returns <see cref="P:DotNext.Optional`1.Empty"/>.
            </summary>
            <typeparam name="U">The type of the result of the mapping function.</typeparam>
            <param name="mapper">A mapping function to be applied to the value, if present.</param>
            <returns>An Optional describing the result of applying a mapping function to the value of this Optional, if a value is present, otherwise <see cref="P:DotNext.Optional`1.Empty"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.Convert``1(System.Converter{`0,DotNext.Optional{``0}})">
            <summary>
            If a value is present, apply the provided mapping function to it, and if the result is 
            non-null, return an Optional describing the result. Otherwise returns <see cref="P:DotNext.Optional`1.Empty"/>.
            </summary>
            <typeparam name="U">The type of the result of the mapping function.</typeparam>
            <param name="mapper">A mapping function to be applied to the value, if present.</param>
            <returns>An Optional describing the result of applying a mapping function to the value of this Optional, if a value is present, otherwise <see cref="P:DotNext.Optional`1.Empty"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.If(System.Predicate{`0})">
            <summary>
            If a value is present, and the value matches the given predicate, 
            return an Optional describing the value, otherwise return an empty Optional.
            </summary>
            <param name="condition">A predicate to apply to the value, if present.</param>
            <returns>An Optional describing the value of this Optional if a value is present and the value matches the given predicate, otherwise an empty Optional</returns>
        </member>
        <member name="M:DotNext.Optional`1.ToString">
            <summary>
            Returns textual representation of this object.
            </summary>
            <returns>The textual representatin of this object.</returns>
        </member>
        <member name="M:DotNext.Optional`1.GetHashCode">
            <summary>
            Computes hash code of the stored value.
            </summary>
            <returns>The hash code of the stored value.</returns>
            <remarks>
            This method calls <see cref="M:System.Object.GetHashCode"/>
            for the object <see cref="P:DotNext.Optional`1.Value"/>.
            </remarks>
        </member>
        <member name="M:DotNext.Optional`1.Equals(`0)">
            <summary>
            Determines whether this container stored the same
            value as the specified value.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns><see langword="true"/> if <see cref="P:DotNext.Optional`1.Value"/> is equal to <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.Equals(DotNext.Optional{`0}@)">
            <summary>
            Determines whether this container stores
            the same value as other.
            </summary>
            <param name="other">Other container to compare.</param>
            <returns><see langword="true"/> if this contauner stores the same value as <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.Equals(System.Object)">
            <summary>
            Determines whether this container stores
            the same value as other.
            </summary>
            <param name="other">Other container to compare.</param>
            <returns><see langword="true"/> if this contauner stores the same value as <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.Equals(System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Performs equality check between stored value
            and the specified value using method <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/>.
            </summary>
            <param name="other">Other object to compare with <see cref="P:DotNext.Optional`1.Value"/>.</param>
            <param name="comparer">The comparer implementing custom equality check.</param>
            <returns><see langword="true"/> if <paramref name="other"/> is equal to <see cref="P:DotNext.Optional`1.Value"/> using custom check; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.GetHashCode(System.Collections.IEqualityComparer)">
            <summary>
            Computes hash code for the stored value 
            using method <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)"/>.
            </summary>
            <param name="comparer">The comparer implementing hash code function.</param>
            <returns>The hash code of <see cref="P:DotNext.Optional`1.Value"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.op_Implicit(`0)~DotNext.Optional{`0}">
            <summary>
            Wraps value into Optional container.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:DotNext.Optional`1.op_Explicit(DotNext.Optional{`0}@)~`0">
            <summary>
            Extracts value stored in the Optional container.
            </summary>
            <param name="optional">The container.</param>
            <exception cref="T:System.InvalidOperationException">No value is present.</exception>
        </member>
        <member name="M:DotNext.Optional`1.op_Equality(DotNext.Optional{`0}@,DotNext.Optional{`0}@)">
            <summary>
            Determines whether two containers store the same value.
            </summary>
            <param name="first">The first container to compare.</param>
            <param name="second">The second container to compare.</param>
            <returns><see langword="true"/>, if both containers store the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.op_Inequality(DotNext.Optional{`0}@,DotNext.Optional{`0}@)">
            <summary>
            Determines whether two containers store the different values.
            </summary>
            <param name="first">The first container to compare.</param>
            <param name="second">The second container to compare.</param>
            <returns><see langword="true"/>, if both containers store the different values; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.op_BitwiseOr(DotNext.Optional{`0}@,DotNext.Optional{`0}@)">
            <summary>
            Returns non-empty container.
            </summary>
            <param name="first">The first container.</param>
            <param name="second">The second container.</param>
            <returns>The first non-empty container.</returns>
            <see cref="M:DotNext.Optional.Coalesce``1(DotNext.Optional{``0}@,DotNext.Optional{``0}@)"/>
        </member>
        <member name="M:DotNext.Optional`1.op_ExclusiveOr(DotNext.Optional{`0}@,DotNext.Optional{`0}@)">
            <summary>
            Determines whether two containers are empty or have values.
            </summary>
            <param name="first">The first container.</param>
            <param name="second">The second container.</param>
            <returns><see langword="true"/>, if both containers are empty or have values; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Optional`1.op_True(DotNext.Optional{`0}@)">
            <summary>
            Checks whether the container has value.
            </summary>
            <param name="optional">The container to check.</param>
            <returns><see langword="true"/> if this container has value; otherwise, <see langword="false"/>.</returns>
            <see cref="P:DotNext.Optional`1.IsPresent"/>
        </member>
        <member name="M:DotNext.Optional`1.op_False(DotNext.Optional{`0}@)">
            <summary>
            Checks whether the container has no value.
            </summary>
            <param name="optional">The container to check.</param>
            <returns><see langword="true"/> if this container has no value; otherwise, <see langword="false"/>.</returns>
            <see cref="P:DotNext.Optional`1.IsPresent"/>
        </member>
        <member name="T:DotNext.Predicate">
            <summary>
            Provides extension methods for type <see cref="T:System.Predicate`1"/> and
            predefined predicates.
            </summary>
        </member>
        <member name="M:DotNext.Predicate.IsNull``1">
            <summary>
            Returns predicate implementing nullability check.
            </summary>
            <typeparam name="T">Type of predicate argument.</typeparam>
            <returns>The predicate instance.</returns>
            <remarks>
            This method returns the same instance of predicate on every call.
            </remarks>
        </member>
        <member name="M:DotNext.Predicate.IsNotNull``1">
            <summary>
            Returns predicate checking that input argument 
            is not <see langword="null"/>.
            </summary>
            <typeparam name="T">Type of the predicate argument.</typeparam>
            <returns>The predicate instance.</returns>
            <remarks>
            This method returns the same instance of predicate on every call.
            </remarks>
        </member>
        <member name="M:DotNext.Predicate.True``1">
            <summary>
            Returns a predicate which always returns <see langword="true"/>.
            </summary>
            <typeparam name="T">Type of predicate argument.</typeparam>
            <returns>A predicate which always returns <see langword="true"/>.</returns>
            <remarks>
            This method returns the same instance of predicate on every call.
            </remarks>
        </member>
        <member name="M:DotNext.Predicate.False``1">
            <summary>
            Returns a predicate which always returns <see langword="false"/>.
            </summary>
            <typeparam name="T">Type of predicate argument.</typeparam>
            <returns>A predicate which always returns <see langword="false"/>.</returns>
            <remarks>
            This method returns the same instance of predicate on every call.
            </remarks>
        </member>
        <member name="M:DotNext.Predicate.AsFunc``1(System.Predicate{``0})">
            <summary>
            Represents predicate as type <see cref="T:System.Func`2"/>.
            </summary>
            <param name="predicate">A predicate to convert.</param>
            <typeparam name="T">Type of predicate argument.</typeparam>
            <returns>A delegate of type <see cref="T:System.Func`2"/> referencing the same method as original predicate.</returns>
        </member>
        <member name="M:DotNext.Predicate.AsConverter``1(System.Predicate{``0})">
            <summary>
            Represents predicate as type <see cref="T:System.Converter`2"/>.
            </summary>
            <param name="predicate">A predicate to convert.</param>
            <typeparam name="T">Type of predicate argument.</typeparam>
            <returns>A delegate of type <see cref="T:System.Converter`2"/> referencing the same method as original predicate.</returns>
        </member>
        <member name="M:DotNext.Predicate.Negate``1(System.Predicate{``0})">
            <summary>
            Returns a predicate which negates evaluation result of
            the original predicate.
            </summary>
            <typeparam name="T">Type of the predicate argument.</typeparam>
            <param name="predicate">The predicate to negate.</param>
            <returns>The predicate which negates evalutation result of the original predicate.</returns>
        </member>
        <member name="M:DotNext.Predicate.Or``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Returns a predicate which computes logical OR between
            results of two other predicates.
            </summary>
            <typeparam name="T">Type of the predicate argument.</typeparam>
            <param name="left">The first predicate acting as logical OR operand.</param>
            <param name="right">The second predicate acting as logical OR operand.</param>
            <returns>The predicate which computes logical OR between results of two other predicates.</returns>
        </member>
        <member name="M:DotNext.Predicate.And``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Returns a predicate which computes logical AND between
            results of two other predicates.
            </summary>
            <typeparam name="T">Type of the predicate argument.</typeparam>
            <param name="left">The first predicate acting as logical AND operand.</param>
            <param name="right">The second predicate acting as logical AND operand.</param>
            <returns>The predicate which computes logical AND between results of two other predicates.</returns>
        </member>
        <member name="M:DotNext.Predicate.Xor``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Returns a predicate which computes logical XOR between
            results of two other predicates.
            </summary>
            <typeparam name="T">Type of the predicate argument.</typeparam>
            <param name="left">The first predicate acting as logical XOR operand.</param>
            <param name="right">The second predicate acting as logical XOR operand.</param>
            <returns>The predicate which computes logical XOR between results of two other predicates.</returns>
        </member>
        <member name="T:DotNext.RandomExtensions">
            <summary>
            Provides random data generation.
            </summary>
        </member>
        <member name="M:DotNext.RandomExtensions.NextString(System.Random,System.Char[],System.Int32)">
            <summary>
            Generates random string of the given length.
            </summary>
            <param name="random">The source of random numbers.</param>
            <param name="allowedChars">The array of allowed characters for the random string.</param>
            <param name="length">The length of the random string.</param>
            <returns>Randomly generated string.</returns>
        </member>
        <member name="M:DotNext.RandomExtensions.NextString(System.Random,System.String,System.Int32)">
            <summary>
            Generates random string of the given length.
            </summary>
            <param name="random">The source of random numbers.</param>
            <param name="allowedChars">The string of allowed characters for the random string.</param>
            <param name="length">The length of the random string.</param>
            <returns>Randomly generated string.</returns>
        </member>
        <member name="M:DotNext.RandomExtensions.NextString(System.Security.Cryptography.RandomNumberGenerator,System.Char[],System.Int32)">
            <summary>
            Generates random string of the given length.
            </summary>
            <param name="random">The source of random numbers.</param>
            <param name="allowedChars">The array of allowed characters for the random string.</param>
            <param name="length">The length of the random string.</param>
            <returns>Randomly generated string.</returns>
        </member>
        <member name="M:DotNext.RandomExtensions.NextString(System.Security.Cryptography.RandomNumberGenerator,System.String,System.Int32)">
            <summary>
            Generates random string of the given length.
            </summary>
            <param name="random">The source of random numbers.</param>
            <param name="allowedChars">The string of allowed characters for the random string.</param>
            <param name="length">The length of the random string.</param>
            <returns>Randomly generated string.</returns>
        </member>
        <member name="M:DotNext.RandomExtensions.NextBoolean(System.Random,System.Double)">
            <summary>
            Generates random boolean value.
            </summary>
            <param name="random">The source of random numbers.</param>
            <param name="trueProbability">A probability of <see langword="true"/> result (should be between 0.0 and 1.0).</param>
            <returns>Randomly generated boolean value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trueProbability"/> value is invalid.</exception>
        </member>
        <member name="M:DotNext.RandomExtensions.Next(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Generates random non-negative random integer.
            </summary>
            <param name="random">The source of random numbers.</param>
            <returns>A 32-bit signed integer that is in range [0, <see cref="F:System.Int32.MaxValue"/>].</returns>
        </member>
        <member name="M:DotNext.RandomExtensions.NextBoolean(System.Security.Cryptography.RandomNumberGenerator,System.Double)">
            <summary>
            Generates random boolean value.
            </summary>
            <param name="random">The source of random numbers.</param>
            <param name="trueProbability">A probability of <see langword="true"/> result (should be between 0.0 and 1.0).</param>
            <returns>Randomly generated boolean value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="trueProbability"/> value is invalid.</exception>
        </member>
        <member name="M:DotNext.RandomExtensions.NextDouble(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Returns a random floating-point number that is greater than
            in range [0, 1).
            </summary>
            <param name="random">The source of random numbers.</param>
            <returns>Randomly generated floating-point number.</returns>
        </member>
        <member name="T:DotNext.Range">
            <summary>
            Range checks.
            </summary>
        </member>
        <member name="M:DotNext.Range.Clamp``1(``0,``0,``0)">
            <summary>
            Restricts a <paramref name="value" /> in specific range.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="value">Value to be restricted.</param>
            <param name="min">Minimal range value.</param>
            <param name="max">Maximum range value.</param>
        </member>
        <member name="M:DotNext.Range.LowerBounded``1(``0,``0)">
            <summary>
            Restricts a <paramref name="value" /> minimal value.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="value">The value to be restricted.</param>
            <param name="min">The lower bound.</param>
        </member>
        <member name="M:DotNext.Range.UpperBounded``1(``0,``0)">
            <summary>
            Restricts a <paramref name="value" /> maximum value.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="value">The value to be restricted.</param>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:DotNext.Range.Between``1(``0,``0,``0,DotNext.BoundType)">
            <summary>
            Checks whether specified value is in range.
            </summary>
            <typeparam name="T">Type of value to check.</typeparam>
            <param name="value">Value to check.</param>
            <param name="left">Range left bound.</param>
            <param name="right">Range right bound.</param>
            <param name="boundType">Range endpoints bound type.</param>
            <returns><see langword="true"/>, if <paramref name="value"/> is in its bounds.</returns>
        </member>
        <member name="T:DotNext.Reflection.CollectionType">
            <summary>
            Provides specialized reflection methods for
            collection types.
            </summary>
        </member>
        <member name="M:DotNext.Reflection.CollectionType.GetItemType(System.Type,System.Type@)">
            <summary>
            Obtains type of items in the collection type.
            </summary>
            <param name="collectionType">Any collection type implementing <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="enumerableInterface">The type <see cref="T:System.Collections.Generic.IEnumerable`1"/> with actual generic argument.</param>
            <returns>Type of items in the collection; or <see langword="null"/> if <paramref name="collectionType"/> is not a generic collection.</returns>
        </member>
        <member name="M:DotNext.Reflection.CollectionType.GetItemType(System.Type)">
            <summary>
            Obtains type of items in the collection type.
            </summary>
            <param name="collectionType">Any collection type implementing <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>Type of items in the collection; or <see langword="null"/> if <paramref name="collectionType"/> is not a generic collection.</returns>
        </member>
        <member name="T:DotNext.Reflection.Conversion`2">
            <summary>
            Provides access to implicit or explicit type conversion
            operator between two types.
            </summary>
            <typeparam name="I">Source type to convert.</typeparam>
            <typeparam name="O">Type of conversion result.</typeparam>
        </member>
        <member name="F:DotNext.Reflection.Conversion`2.Converter">
            <summary>
            Represents implicit or explicit cast operator
            wrapped into delegate.
            </summary>
        </member>
        <member name="F:DotNext.Reflection.Conversion`2.IsSupported">
            <summary>
            Indicates that overloaded type-cast operator between types <typeparamref name="I"/> and <typeparamref name="O"/>
            is present.
            </summary>
        </member>
        <member name="T:DotNext.Reflection.DelegateType">
            <summary>
            Provides specialized reflection methods for
            delegate types. 
            </summary>
        </member>
        <member name="M:DotNext.Reflection.DelegateType.GetInvokeMethod``1">
            <summary>
            Returns special Invoke method generate for each delegate type.
            </summary>
            <typeparam name="D">Type of delegate.</typeparam>
            <returns>An object representing reflected method Invoke.</returns>
        </member>
        <member name="T:DotNext.Reflection.DisposableType">
            <summary>
            Provides specialized reflection methods for
            types implemeting dispose pattern.
            </summary>
        </member>
        <member name="M:DotNext.Reflection.DisposableType.GetDisposeMethod(System.Type)">
            <summary>
            Gets Dispose method which implements dispose pattern.
            </summary>
            <remarks>
            This method checks whether the type implements <see cref="T:System.IDisposable"/>.
            If it is then return <see cref="M:System.IDisposable.Dispose"/> method. Otherwise,
            return public instance method with name Dispose.
            </remarks>
            <param name="type">The type to inspect.</param>
            <returns>Dispose method; or <see langword="null"/>, if this method doesn't exist.</returns>
        </member>
        <member name="T:DotNext.Reflection.Method">
            <summary>
            Various extension methods for method reflection.
            </summary>
        </member>
        <member name="M:DotNext.Reflection.Method.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Returns method parameter types respecting orded of parameters.
            </summary>
            <param name="method">The method to reflect.</param>
            <returns>The array of parameter types.</returns>
        </member>
        <member name="M:DotNext.Reflection.Method.SignatureEquals(System.Reflection.MethodBase,System.Type[])">
            <summary>
            Determines whether the method parameters have the same set of types as in given array of types.
            </summary>
            <param name="method">The method to check.</param>
            <param name="parameters">The expected parameter types.</param>
            <returns><see langword="true"/>, if the method parameters have the same set of types as types passed as array; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Reflection.Method.SignatureEquals(System.Reflection.MethodBase,System.Reflection.MethodBase)">
            <summary>
            Determines whether formal parameters of both methods are equal by type.
            </summary>
            <param name="method">The first method to compare.</param>
            <param name="other">The second method to compare.</param>
            <returns><see langword="true"/>, if both methods have the same number of formal parameters and parameters are equal by type; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Reflection.Method.SignatureEquals(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Determines whether formal parameters of both methods are equal by type
            and return types are also equal.
            </summary>
            <param name="method">The first method to compare.</param>
            <param name="other">The second method to compare.</param>
            <returns><see langword="true"/>, if both methods have the same number of formal parameters, parameters are equal by type and return types are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Reflection.TaskType">
            <summary>
            Provides specialized reflection methods for
            task types. 
            </summary>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Threading.Tasks.Task`1"/>
        </member>
        <member name="M:DotNext.Reflection.TaskType.MakeTaskType(System.Type)">
            <summary>
            Returns task type for the specified result type.
            </summary>
            <param name="taskResult">Task result type.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> if <paramref name="taskResult"/> is <see cref="T:System.Void"/>; or <see cref="T:System.Threading.Tasks.Task`1"/> with actual generic argument equals to <paramref name="taskResult"/>.</returns>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Threading.Tasks.Task`1"/>
        </member>
        <member name="M:DotNext.Reflection.TaskType.GetTaskType(System.Type)">
            <summary>
            Obtains result type from task type.
            </summary>
            <param name="taskType">A type of <see cref="T:System.Threading.Tasks.Task"/> or <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>Task result type; or <see langword="null"/> if <paramref name="taskType"/> is not a task type.</returns>
        </member>
        <member name="T:DotNext.Reflection.TypeExtensions">
            <summary>
            Various extension methods for type reflection.
            </summary>
        </member>
        <member name="M:DotNext.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Int64,System.Type[])">
            <summary>
            Searches for the generic method in the specified type.
            </summary>
            <param name="type">The type in which search should be performed.</param>
            <param name="methodName">The name of the method to get.</param>
            <param name="flags">A bitmask that specify how the search is conducted.</param>
            <param name="genericParamCount">Number of generic parameters in the method signature.</param>
            <param name="parameters">An array representing the number, order, and type of the parameters for the method to get.</param>
            <returns>Search result; or <see langword="null"/> if search criteria is invalid or method doesn't exist.</returns>
            <remarks>
            Element of the array <paramref name="parameters"/> should be <see langword="null"/> if this parameter of generic type.
            </remarks>
        </member>
        <member name="M:DotNext.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Searches for the specified method whose parameters match the specified argument types, using the specified binding constraints.
            </summary>
            <param name="type">The type in which search should be performed.</param>
            <param name="name">The name of the method to get.</param>
            <param name="flags">A bitmask that specify how the search is conducted.</param>
            <param name="parameters">An array representing the number, order, and type of the parameters for the method to get.</param>
            <returns>Search result; or <see langword="null"/> if search criteria is invalid or method doesn't exist.</returns>
        </member>
        <member name="M:DotNext.Reflection.TypeExtensions.IsGenericInstanceOf(System.Type,System.Type)">
            <summary>
            Determines whether the type is an instance of the specified generic type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="genericDefinition">Generic type definition.</param>
            <returns><see langword="true"/>, if the type is an instance of the specified generic type; otherwise, <see langword="false"/>.</returns>
            <example>
            <code>
            typeof(byte[]).IsGenericInstanceOf(typeof(IEnumerable&lt;&gt;));    //returns true
            typeof(List&lt;int&gt;).IsGenericInstanceOf(typeof(List&lt;int&gt;));   //returns true
            </code>
            </example>
        </member>
        <member name="M:DotNext.Reflection.TypeExtensions.GetGenericArguments(System.Type,System.Type)">
            <summary>
            Returns actual generic arguments passed into generic type definition implemented by the input type.
            </summary>
            <param name="type"></param>
            <param name="genericDefinition"></param>
            <returns></returns>
            <example>
            <code>
            var elementTypes = typeof(byte[]).IsGenericInstanceOf(typeof(IEnumerable&lt;&gt;));
            elementTypes[0] == typeof(byte); //true
            </code>
            </example>
        </member>
        <member name="M:DotNext.Reflection.TypeExtensions.GetTypeCode(System.Type)">
            <summary>
            Gets type code for the specified type.
            </summary>
            <param name="t">The type to convert into type code.</param>
            <returns>Type code.</returns>
        </member>
        <member name="M:DotNext.Reflection.TypeExtensions.IsAssignableFromWithoutBoxing(System.Type,System.Type)">
            <summary>
            Indicates that object of one type can be implicitly converted into another whithout boxing.
            </summary>
            <param name="to">Type of conversion result.</param>
            <param name="from">The type check.</param>
            <returns><see langword="true"/> if <paramref name="from"/> is implicitly convertible into <paramref name="to"/> without boxing.</returns>
            <seealso cref="M:System.Type.IsAssignableFrom(System.Type)"/>
            <example>
            <code>
            typeof(object).IsAssignableFrom(typeof(int)); //true
            typeof(object).IsAssignableFromWithoutBoxing(typeof(int)); //false
            typeof(object).IsAssignableFrom(typeof(string));    //true
            typeof(object).IsAssignableFromWithoutBoxing(typeof(string));//true
            </code>
            </example>
        </member>
        <member name="M:DotNext.Reflection.TypeExtensions.Cast(System.Type,System.Object)">
            <summary>
            Casts an object to the class, value type or interface.
            </summary>
            <param name="type">The type cast result.</param>
            <param name="obj">The object to be cast.</param>
            <returns>The object after casting, or <see langword="null"/> if <paramref name="obj"/> is <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            If the object is not <see langword="null"/> and is not assignable to the <paramref name="type"/>; 
            or if object is <see langword="null"/> and <paramref name="type"/> is value type.
            </exception>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.Memory">
            <summary>
            Low-level methods for direct memory access.
            </summary>
            <remarks>
            Methods in this class doesn't perform
            any safety check. Incorrect usage of them may destabilize
            Common Language Runtime.
            </remarks>
        </member>
        <member name="F:DotNext.Runtime.InteropServices.Memory.NullPtr">
            <summary>
            Represents null pointer.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Read``1(System.IntPtr@)">
            <summary>
            Reads a value of type <typeparamref name="T"/> from the given location
            and adjust pointer according with size of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Unmanaged type to dereference.</typeparam>
            <param name="source">A pointer to block of memory.</param>
            <returns>Dereferenced value.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.ReadUnaligned``1(System.IntPtr@)">
            <summary>
            Reads a value of type <typeparamref name="T"/> from the given location
            without assuming architecture dependent alignment of the addresses;
            and adjust pointer according with size of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Unmanaged type to dereference.</typeparam>
            <param name="source">A pointer to block of memory.</param>
            <returns>Dereferenced value.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Write``1(System.IntPtr@,``0)">
            <summary>
            Writes a value into the address using aligned access
            and adjust address according with size of
            type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Unmanaged type.</typeparam>
            <param name="destination">Destination address.</param>
            <param name="value">The value to write into the address.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.WriteUnaligned``1(System.IntPtr@,``0)">
            <summary>
            Writes a value into the address using unaligned access
            and adjust address according with size of
            type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Unmanaged type.</typeparam>
            <param name="destination">Destination address.</param>
            <param name="value">The value to write into the address.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Copy(System.Void*,System.Void*,System.Int64)">
            <summary>
            Copies specified number of bytes from one address in memory to another.
            </summary>
            <param name="source">The address of the bytes to copy.</param>
            <param name="destination">The target address.</param>
            <param name="length">The number of bytes to copy from source address to destination.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Copy(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Copies specified number of bytes from one address in memory to another.
            </summary>
            <param name="source">The address of the bytes to copy.</param>
            <param name="destination">The target address.</param>
            <param name="length">The number of bytes to copy from source address to destination.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.ReadFromStreamAsync(System.IO.Stream,System.IntPtr,System.Int64)">
            <summary>
            Copies specified number of bytes from stream into memory.
            </summary>
            <remarks>
            Reading from stream is performed asynchronously.
            </remarks>
            <param name="source">The source of bytes.</param>
            <param name="destination">The pointer to destination memory block.</param>
            <param name="length">The number of bytes to copy from source stream into destination memory block.</param>
            <returns>The task representing state of copy operation and returning number of bytes copied.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.ReadFromStreamAsync(System.IO.Stream,System.Void*,System.Int64)">
            <summary>
            Copies specified number of bytes from stream into memory.
            </summary>
            <remarks>
            Reading from stream is performed asynchronously.
            </remarks>
            <param name="source">The source of bytes.</param>
            <param name="destination">The pointer to destination memory block.</param>
            <param name="length">The number of bytes to copy from source stream into destination memory block.</param>
            <returns>The task representing state of copy operation and returning number of bytes copied.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.ReadFromStream(System.IO.Stream,System.IntPtr,System.Int64)">
            <summary>
            Copies specified number of bytes from stream into memory.
            </summary>
            <remarks>
            Reading from stream is performed synchronously.
            </remarks>
            <param name="source">The source of bytes.</param>
            <param name="destination">The pointer to destination memory block.</param>
            <param name="length">The number of bytes to copy from source stream into destination memory block.</param>
            <returns>The number of bytes copied.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.ReadFromStream(System.IO.Stream,System.Void*,System.Int64)">
            <summary>
            Copies specified number of bytes from stream into memory.
            </summary>
            <remarks>
            Reading from stream is performed synchronously.
            </remarks>
            <param name="source">The source of bytes.</param>
            <param name="destination">The pointer to destination memory block.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns>The number of bytes copied.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.WriteToSteam(System.IntPtr,System.Int64,System.IO.Stream)">
            <summary>
            Copies specified number of bytes memory into stream.
            </summary>
            <remarks>
            Writing to stream is performed synchronously.
            </remarks>
            <param name="source">The pointer to source memory block.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="destination">The stream to write into.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.WriteToSteam(System.Void*,System.Int64,System.IO.Stream)">
            <summary>
            Copies specified number of bytes memory into stream.
            </summary>
            <remarks>
            Writing to stream is performed synchronously.
            </remarks>
            <param name="source">The pointer to source memory block.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="destination">The stream to write into.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.WriteToSteamAsync(System.IntPtr,System.Int64,System.IO.Stream)">
            <summary>
            Copies specified number of bytes memory into stream.
            </summary>
            <remarks>
            Writing to stream is performed asynchronously.
            </remarks>
            <param name="source">The pointer to source memory block.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="destination">The stream to write into.</param>
            <returns>The task representing asynchronous state of copying.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.WriteToSteamAsync(System.Void*,System.Int64,System.IO.Stream)">
            <summary>
            Copies specified number of bytes memory into stream.
            </summary>
            <remarks>
            Writing to stream is performed asynchronously.
            </remarks>
            <param name="source">The pointer to source memory block.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="destination">The stream to write into.</param>
            <returns>The task representing asynchronous state of copying.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.GetHashCode(System.IntPtr,System.Int64,System.Int64,System.Func{System.Int64,System.Int64,System.Int64},System.Boolean)">
            <summary>
            Computes hash code for the block of memory, 64-bit version.
            </summary>
            <remarks>
            This method may give different value each time you run the program for
            the same data. To disable this behavior, pass false to <paramref name="salted"/>. 
            </remarks>
            <param name="source">A pointer to the block of memory.</param>
            <param name="length">Length of memory block to be hashed, in bytes.</param>
            <param name="hash">Initial value of the hash.</param>
            <param name="hashFunction">Hashing function.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>Hash code of the memory block.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.GetHashCode(System.Void*,System.Int64,System.Int64,System.Func{System.Int64,System.Int64,System.Int64},System.Boolean)">
            <summary>
            Computes hash code for the block of memory, 64-bit version.
            </summary>
            <remarks>
            This method may give different value each time you run the program for
            the same data. To disable this behavior, pass false to <paramref name="salted"/>. 
            </remarks>
            <param name="source">A pointer to the block of memory.</param>
            <param name="length">Length of memory block to be hashed, in bytes.</param>
            <param name="hash">Initial value of the hash.</param>
            <param name="hashFunction">Hashing function.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>Hash code of the memory block.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.GetHashCode(System.IntPtr,System.Int64,System.Int32,System.Func{System.Int32,System.Int32,System.Int32},System.Boolean)">
            <summary>
            Computes hash code for the block of memory.
            </summary>
            <remarks>
            This method may give different value each time you run the program for
            the same data. To disable this behavior, pass false to <paramref name="salted"/>. 
            </remarks>
            <param name="source">A pointer to the block of memory.</param>
            <param name="length">Length of memory block to be hashed, in bytes.</param>
            <param name="hash">Initial value of the hash.</param>
            <param name="hashFunction">Hashing function.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>Hash code of the memory block.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.GetHashCode(System.Void*,System.Int64,System.Int32,System.Func{System.Int32,System.Int32,System.Int32},System.Boolean)">
            <summary>
            Computes hash code for the block of memory.
            </summary>
            <remarks>
            This method may give different value each time you run the program for
            the same data. To disable this behavior, pass false to <paramref name="salted"/>. 
            </remarks>
            <param name="source">A pointer to the block of memory.</param>
            <param name="length">Length of memory block to be hashed, in bytes.</param>
            <param name="hash">Initial value of the hash.</param>
            <param name="hashFunction">Hashing function.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>Hash code of the memory block.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.GetHashCode(System.IntPtr,System.Int64,System.Boolean)">
            <summary>
            Computes hash code for the block of memory.
            </summary>
            <param name="source">A pointer to the block of memory.</param>
            <param name="length">Length of memory block to be hashed, in bytes.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <remarks>
            This method uses FNV-1a hash algorithm.
            </remarks>
            <returns>Content hash code.</returns>
            <seealso href="http://www.isthe.com/chongo/tech/comp/fnv/#FNV-1a">FNV-1a</seealso>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.GetHashCode(System.Void*,System.Int64,System.Boolean)">
            <summary>
            Computes hash code for the block of memory.
            </summary>
            <param name="source">A pointer to the block of memory.</param>
            <param name="length">Length of memory block to be hashed, in bytes.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <remarks>
            This method uses FNV-1a hash algorithm.
            </remarks>
            <returns>Content hash code.</returns>
            <seealso href="http://www.isthe.com/chongo/tech/comp/fnv/#FNV-1a">FNV-1a</seealso>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.ZeroMem(System.IntPtr,System.Int64)">
            <summary>
            Sets all bits of allocated memory to zero.
            </summary>
            <remarks>
            This method has the same behavior as <see cref="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)"/> but
            without restriction on <see cref="T:System.UInt32"/> data type for the length of the memory block.
            </remarks>
            <param name="ptr">The pointer to the memory to be cleared.</param>
            <param name="length">The length of the memory to be cleared.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.ZeroMem(System.Void*,System.Int64)">
            <summary>
            Sets all bits of allocated memory to zero.
            </summary>
            <param name="ptr">The pointer to the memory to be cleared.</param>
            <param name="length">The length of the memory to be cleared.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Equals(System.Void*,System.Void*,System.Int32)">
            <summary>
            Computes equality between two blocks of memory.
            </summary>
            <param name="first">A pointer to the first memory block.</param>
            <param name="second">A pointer to the second memory block.</param>
            <param name="length">Length of first and second memory blocks, in bytes.</param>
            <returns>True, if both memory blocks have the same data; otherwise, false.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Equals(System.Void*,System.Void*,System.Int64)">
            <summary>
            Computes equality between two blocks of memory.
            </summary>
            <param name="first">A pointer to the first memory block.</param>
            <param name="second">A pointer to the second memory block.</param>
            <param name="length">Length of first and second memory blocks, in bytes.</param>
            <returns>True, if both memory blocks have the same data; otherwise, false.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Equals(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Computes equality between two blocks of memory.
            </summary>
            <param name="first">A pointer to the first memory block.</param>
            <param name="second">A pointer to the second memory block.</param>
            <param name="length">Length of first and second memory blocks, in bytes.</param>
            <returns>True, if both memory blocks have the same data; otherwise, false.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Equals(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Computes equality between two blocks of memory.
            </summary>
            <param name="first">A pointer to the first memory block.</param>
            <param name="second">A pointer to the second memory block.</param>
            <param name="length">Length of first and second memory blocks, in bytes.</param>
            <returns>True, if both memory blocks have the same data; otherwise, false.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Compare(System.Void*,System.Void*,System.Int32)">
            <summary>
            Bitwise comparison of two memory blocks.
            </summary>
            <param name="first">The pointer to the first memory block.</param>
            <param name="second">The pointer to the second memory block.</param>
            <param name="length">The length of the first and second memory blocks.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Compare(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Bitwise comparison of two memory blocks.
            </summary>
            <param name="first">The pointer to the first memory block.</param>
            <param name="second">The pointer to the second memory block.</param>
            <param name="length">The length of the first and second memory blocks.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Compare(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Bitwise comparison of two memory blocks.
            </summary>
            <param name="first">The pointer to the first memory block.</param>
            <param name="second">The pointer to the second memory block.</param>
            <param name="length">The length of the first and second memory blocks.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.Compare(System.Void*,System.Void*,System.Int64)">
            <summary>
            Bitwise comparison of two memory blocks.
            </summary>
            <param name="first">The pointer to the first memory block.</param>
            <param name="second">The pointer to the second memory block.</param>
            <param name="length">The length of the first and second memory blocks.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.AreSame``1(``0@,``0@)">
            <summary>
            Indicates that two managed pointers are equal.
            </summary>
            <typeparam name="T">Type of managed pointer.</typeparam>
            <param name="first">The first managed pointer.</param>
            <param name="second">The second managed pointer.</param>
            <returns><see langword="true"/>, if both managed pointers are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Memory.AddressOf``1(``0@)">
            <summary>
            Returns address of the managed pointer to type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of managed pointer.</typeparam>
            <param name="value">Managed pointer to convert into address.</param>
            <returns>The address for the managed pointer.</returns>
            <remarks>
            This method converts managed pointer into address,
            not the address of the object itself.
            </remarks>
        </member>
        <member name="T:DotNext.Sequence">
            <summary>
            Various methods to work with classes implementing <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:DotNext.Sequence.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Apply specified action to each collection element.
            </summary>
            <typeparam name="T">Type of elements in the collection.</typeparam>
            <param name="collection">A collection to enumerate. Cannot be <see langword="null"/>.</param>
            <param name="action">An action to applied for each element.</param>
        </member>
        <member name="M:DotNext.Sequence.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains first value type in the sequence; or <see langword="null"/>
            if sequence is empty.
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="seq">A sequence to check. Cannot be <see langword="null"/>.</param>
            <returns>First element in the sequence; or <see langword="null"/> if sequence is empty. </returns>
        </member>
        <member name="M:DotNext.Sequence.FirstOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains first value in the sequence; or <see cref="P:DotNext.Optional`1.Empty"/>
            if sequence is empty.
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="seq">A sequence to check. Cannot be <see langword="null"/>.</param>
            <returns>First element in the sequence; or <see cref="P:DotNext.Optional`1.Empty"/> if sequence is empty. </returns>
        </member>
        <member name="M:DotNext.Sequence.Skip``1(System.Collections.Generic.IEnumerator{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerator">Enumerator to modify. Cannot be <see langword="null"/>.</param>
            <param name="count">The number of elements to skip.</param>
            <returns><see langword="true"/>, if current element is available; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Sequence.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0@)">
            <summary>
            Obtains elements at the specified index in the sequence.
            </summary>
            <remarks>
            This method is optimized for types <see cref="T:System.Collections.Generic.IList`1"/>
            and <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </remarks>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="collection">Source collection.</param>
            <param name="index">Index of the element to read.</param>
            <param name="element">Obtained element.</param>
            <returns><see langword="true"/>, if element is available in the collection and obtained successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Sequence.SkipNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Skip <see langword="null"/> values in the collection.
            </summary>
            <typeparam name="T">Type of elements in the collection.</typeparam>
            <param name="collection">A collection to check. Cannot be <see langword="null"/>.</param>
            <returns>Modified lazy collection without <see langword="null"/> values.</returns>
        </member>
        <member name="M:DotNext.Sequence.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Concatenates each element from the collection into single string.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="collection">Collection to convert. Cannot be <see langword="null"/>.</param>
            <param name="delimiter">Delimiter between elements in the final string.</param>
            <param name="ifEmpty">A string to be returned if collection has no elements.</param>
            <returns>Converted collection into string.</returns>
        </member>
        <member name="M:DotNext.Sequence.Singleton``1(``0)">
            <summary>
            Constructs a sequence from the single element.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="item">An item to be placed into sequence.</param>
            <returns>Sequence of single element.</returns>
        </member>
        <member name="T:DotNext.StringExtensions">
            <summary>
            Represents various extension methods for type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:DotNext.StringExtensions.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Returns alternative string if first string argument 
            is <see langword="null"/> or empty.
            </summary>
            <example>
            This method is equivalent to
            <code>
            var result = string.IsNullOrEmpty(str) ? alt : str;
            </code>
            </example>
            <param name="str">A string to check.</param>
            <param name="alt">Alternative </param>
            <returns>Original or alternative </returns>
        </member>
        <member name="M:DotNext.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse string characters.
            </summary>
            <param name="str">The string to reverse.</param>
            <returns>The string with inversed orded of characters.</returns>
        </member>
        <member name="M:DotNext.StringExtensions.IsEqualIgnoreCase(System.String,System.String)">
            <summary>
            Compares two string using <see cref="F:System.StringComparison.OrdinalIgnoreCase" />.
            </summary>
            <param name="strA">String A (can be null).</param>
            <param name="strB">Stirng B (can be null).</param>
            <returns><see langword="true"/>, if the first string is equal to the second string; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.StringExtensions.TrimLength(System.String,System.Int32)">
            <summary>
            Trims the source string to specified length if it exceeds it.
            If source string is less that <paramref name="maxLength" /> then the source string returned.
            </summary>
            <param name="str">Source string.</param>
            <param name="maxLength">Maximum length.</param>
            <returns>Trimmed string value.</returns>
        </member>
        <member name="T:DotNext.Threading.AsyncDelegate">
            <summary>
            Provides set of methods for asynchronous invocation of various delegates.
            </summary>
            <remarks>
            In .NET Core, BeginInvoke and EndInvoke methods of delegate type are not supported.
            This class provides alternative approach which allows to invoke delegate asynchronously
            with full support of async/await feature.
            </remarks>
            <seealso href="https://github.com/dotnet/corefx/issues/5940">BeginInvoke throws NotSupportedException</seealso>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``1(``0,System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Invokes a delegate of arbitrary type asynchronously.
            </summary>
            <param name="delegate">A delegate to be invoked asynchronously.</param>
            <param name="invoker">Synchronous invoker of the delegate from invocation list.</param>
            <param name="token">Cancellation token.</param>
            <typeparam name="D">Type of delegate to invoke.</typeparam>
            <returns>A task allows to control asynchronous invocation of methods attached to the multicast delegate.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``1(System.EventHandler{``0},System.Object,``0,System.Threading.CancellationToken)">
            <summary>
            Invokes event handlers asynchronously.
            </summary>
            <typeparam name="E">Type of event object.</typeparam>
            <param name="handler">A set event handlers combined as single delegate.</param>
            <param name="sender">Event sender.</param>
            <param name="args">Event arguments.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>An object representing state of the asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync(System.EventHandler,System.Object,System.EventArgs,System.Threading.CancellationToken)">
            <summary>
            Invokes event handlers asynchronously.
            </summary>
            <param name="handler">A set event handlers combined as single delegate.</param>
            <param name="sender">Event sender.</param>
            <param name="args">Event arguments.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>An object representing state of the asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync(System.Action,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``1(System.Action{``0},``0,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T">Type of the action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg">The action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``2(System.Action{``0,``1},``0,``1,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``3(System.Action{``0,``1,``2},``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <typeparam name="T3">Type of the third action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="arg3">The third action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <typeparam name="T3">Type of the third action argument.</typeparam>
            <typeparam name="T4">Type of the fourth action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="arg3">The third action argument.</param>
            <param name="arg4">The fourth action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <typeparam name="T3">Type of the third action argument.</typeparam>
            <typeparam name="T4">Type of the fourth action argument.</typeparam>
            <typeparam name="T5">Type of the fifth action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="arg3">The third action argument.</param>
            <param name="arg4">The fourth action argument.</param>
            <param name="arg5">The fifth action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <typeparam name="T3">Type of the third action argument.</typeparam>
            <typeparam name="T4">Type of the fourth action argument.</typeparam>
            <typeparam name="T5">Type of the fifth action argument.</typeparam>
            <typeparam name="T6">Type of the sixth action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="arg3">The third action argument.</param>
            <param name="arg4">The fourth action argument.</param>
            <param name="arg5">The fifth action argument.</param>
            <param name="arg6">The sixth action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <typeparam name="T3">Type of the third action argument.</typeparam>
            <typeparam name="T4">Type of the fourth action argument.</typeparam>
            <typeparam name="T5">Type of the fifth action argument.</typeparam>
            <typeparam name="T6">Type of the sixth action argument.</typeparam>
            <typeparam name="T7">Type of the seventh action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="arg3">The third action argument.</param>
            <param name="arg4">The fourth action argument.</param>
            <param name="arg5">The fifth action argument.</param>
            <param name="arg6">The sixth action argument.</param>
            <param name="arg7">The seventh action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <typeparam name="T3">Type of the third action argument.</typeparam>
            <typeparam name="T4">Type of the fourth action argument.</typeparam>
            <typeparam name="T5">Type of the fifth action argument.</typeparam>
            <typeparam name="T6">Type of the sixth action argument.</typeparam>
            <typeparam name="T7">Type of the seventh action argument.</typeparam>
            <typeparam name="T8">Type of the eighth action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="arg3">The third action argument.</param>
            <param name="arg4">The fourth action argument.</param>
            <param name="arg5">The fifth action argument.</param>
            <param name="arg6">The sixth action argument.</param>
            <param name="arg7">The seventh action argument.</param>
            <param name="arg8">The eighth action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <typeparam name="T3">Type of the third action argument.</typeparam>
            <typeparam name="T4">Type of the fourth action argument.</typeparam>
            <typeparam name="T5">Type of the fifth action argument.</typeparam>
            <typeparam name="T6">Type of the sixth action argument.</typeparam>
            <typeparam name="T7">Type of the seventh action argument.</typeparam>
            <typeparam name="T8">Type of the eighth action argument.</typeparam>
            <typeparam name="T9">Type of the ninth action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="arg3">The third action argument.</param>
            <param name="arg4">The fourth action argument.</param>
            <param name="arg5">The fifth action argument.</param>
            <param name="arg6">The sixth action argument.</param>
            <param name="arg7">The seventh action argument.</param>
            <param name="arg8">The eighth action argument.</param>
            <param name="arg9">THe ninth action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="M:DotNext.Threading.AsyncDelegate.InvokeAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.CancellationToken)">
            <summary>
            Invokes action asynchronously.
            </summary>
            <typeparam name="T1">Type of the first action argument.</typeparam>
            <typeparam name="T2">Type of the second action argument.</typeparam>
            <typeparam name="T3">Type of the third action argument.</typeparam>
            <typeparam name="T4">Type of the fourth action argument.</typeparam>
            <typeparam name="T5">Type of the fifth action argument.</typeparam>
            <typeparam name="T6">Type of the sixth action argument.</typeparam>
            <typeparam name="T7">Type of the seventh action argument.</typeparam>
            <typeparam name="T8">Type of the eighth action argument.</typeparam>
            <typeparam name="T9">Type of the ninth action argument.</typeparam>
            <typeparam name="T10">Type of the tenth action argument.</typeparam>
            <param name="action">The action to invoke asynchronously.</param>
            <param name="arg1">The first action argument.</param>
            <param name="arg2">The second action argument.</param>
            <param name="arg3">The third action argument.</param>
            <param name="arg4">The fourth action argument.</param>
            <param name="arg5">The fifth action argument.</param>
            <param name="arg6">The sixth action argument.</param>
            <param name="arg7">The seventh action argument.</param>
            <param name="arg8">The eighth action argument.</param>
            <param name="arg9">The ninth action argument.</param>
            <param name="arg10">The tenth action argument.</param>
            <param name="token">Invocation cancellation token.</param>
            <returns>The task representing state of asynchronous invocation.</returns>
        </member>
        <member name="T:DotNext.Threading.AtomicBoolean">
            <summary>
            Represents atomic boolean.
            </summary>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new atomic boolean container with initial value.
            </summary>
            <param name="value">Initial value of the atomic boolean.</param>
        </member>
        <member name="P:DotNext.Threading.AtomicBoolean.Value">
            <summary>
            Gets or sets boolean value in volatile manner.
            </summary>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.CompareExchange(System.Boolean,System.Boolean)">
            <summary>
            Atomically sets referenced value to the given updated value if the current value == the expected value.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.CompareAndSet(System.Boolean,System.Boolean)">
            <summary>
            Atomically sets referenced value to the given updated value if the current value == the expected value.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.FalseToTrue">
            <summary>
            Atomically sets <see langword="true"/> value if the
            current value is <see langword="false"/>.
            </summary>
            <returns><see langword="true"/> if current value is modified successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.TrueToFalse">
            <summary>
            Atomically sets <see langword="false"/> value if the
            current value is <see langword="true"/>.
            </summary>
            <returns><see langword="true"/> if current value is modified successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.NegateAndGet">
            <summary>
            Negates currently stored value atomically.
            </summary>
            <returns>Negation result.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.GetAndNegate">
            <summary>
            Negates currently stored value atomically.
            </summary>
            <returns>The original value before negation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.GetAndSet(System.Boolean)">
            <summary>
            Modifies the current value atomically.
            </summary>
            <param name="update">A new value to be stored into this container.</param>
            <returns>Original value before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.SetAndGet(System.Boolean)">
            <summary>
            Modifies the current value atomically.
            </summary>
            <param name="update">A new value to be stored into this container.</param>
            <returns>A new value passed as argument.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.AccumulateAndGet(System.Boolean,System.Func{System.Boolean,System.Boolean,System.Boolean})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.GetAndAcummulate(System.Boolean,System.Func{System.Boolean,System.Boolean,System.Boolean})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.UpdateAndGet(System.Func{System.Boolean,System.Boolean})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.GetAndUpdate(System.Func{System.Boolean,System.Boolean})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.Equals(System.Boolean)">
            <summary>
            Determines whether stored value is equal to
            value as the passed argument.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns><see langword="true"/>, if stored value is equal to other value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.GetHashCode">
            <summary>
            Computes hash code for the stored value.
            </summary>
            <returns>The hash code of the stored boolean value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.Equals(System.Object)">
            <summary>
            Determines whether stored value is equal to
            value as the passed argument.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns><see langword="true"/>, if stored value is equal to other value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicBoolean.ToString">
            <summary>
            Returns stored boolean value in the form of <see cref="T:System.String"/>.
            </summary>
            <returns>Textual representation of stored boolean value.</returns>
        </member>
        <member name="T:DotNext.Threading.AtomicDouble">
            <summary>
            Various atomic operations for <see cref="T:System.Double"/> data type
            accessible as extension methods.
            </summary>
            <remarks>
            Methods exposed by this class provide volatile read/write
            of the field even if it is not declared as volatile field.
            </remarks>
            <seealso cref="T:System.Threading.Interlocked"/>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.VolatileGet(System.Double@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a
            memory barrier that prevents the processor from reordering memory operations
            as follows: If a read or write appears after this method in the code, the processor
            cannot move it before this method.
            </summary>
            <param name="value">The field to read.</param>
            <returns>
            The value that was read. This value is the latest written by any processor in
            the computer, regardless of the number of processors or the state of processor
            cache.
            </returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.VolatileSet(System.Double@,System.Double)">
            <summary>
            Writes the specified value to the specified field. On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations
            as follows: If a read or write appears before this method in the code, the processor
            cannot move it after this method.
            </summary>
            <param name="value">The field where the value is written.</param>
            <param name="newValue">
            The value to write. The value is written immediately so that it is visible to
            all processors in the computer.
            </param>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.IncrementAndGet(System.Double@)">
            <summary>
            Atomically increments by one referenced value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <returns>Incremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.DecrementAndGet(System.Double@)">
            <summary>
            Atomically decrements by one the current value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <returns>Decremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.Add(System.Double@,System.Double)">
            <summary>
            Adds two 64-bit floating-point numbers and replaces referenced storage with the sum, 
            as an atomic operation.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="operand">The value to be added to the currently stored integer.</param>
            <returns>Result of sum operation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.CompareAndSet(System.Double@,System.Double,System.Double)">
            <summary>
            Atomically sets referenced value to the given updated value if the current value == the expected value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.GetAndSet(System.Double@,System.Double)">
            <summary>
            Modifies referenced value atomically.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="update">A new value to be stored into managed pointer.</param>
            <returns>Original value before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.SetAndGet(System.Double@,System.Double)">
            <summary>
            Modifies value atomically.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="update">A new value to be stored into managed pointer.</param>
            <returns>A new value passed as argument.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.AccumulateAndGet(System.Double@,System.Double,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="value">Reference to a value to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.GetAndAccumulate(System.Double@,System.Double,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="value">Reference to a value to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.UpdateAndGet(System.Double@,System.Func{System.Double,System.Double})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.GetAndUpdate(System.Double@,System.Func{System.Double,System.Double})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.VolatileGet(System.Double[],System.Int64)">
            <summary>
            Performs volatile read of the array element.
            </summary>
            <param name="array">The array to read from.</param>
            <param name="index">The array element index.</param>
            <returns>The array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.VolatileSet(System.Double[],System.Int64,System.Double)">
            <summary>
            Performs volatile write to the array element.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The array element index.</param>
            <param name="value">The new value of the array element.</param>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.IncrementAndGet(System.Double[],System.Int64)">
            <summary>
            Atomically increments the array element by one.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The index of the element to increment atomically.</param>
            <returns>Incremented array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.DecrementAndGet(System.Double[],System.Int64)">
            <summary>
            Atomically decrements the array element by one.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The index of the array element to decrement atomically.</param>
            <returns>Decremented array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.CompareExchange(System.Int64[],System.Int64,System.Int64,System.Int64)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="comparand">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.CompareAndSet(System.Double[],System.Int64,System.Double,System.Double)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.Add(System.Double[],System.Int64,System.Double)">
            <summary>
            Adds two 64-bit integers and replaces array element with the sum, 
            as an atomic operation.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="operand">The value to be added to the currently stored integer.</param>
            <returns>Result of sum operation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.GetAndSet(System.Double[],System.Int64,System.Double)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>Original array element before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.SetAndGet(System.Double[],System.Int64,System.Double)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>The array element after modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.AccumulateAndGet(System.Double[],System.Int64,System.Double,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.GetAndAccumulate(System.Double[],System.Int64,System.Double,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.UpdateAndGet(System.Double[],System.Int64,System.Func{System.Double,System.Double})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicDouble.GetAndUpdate(System.Double[],System.Int64,System.Func{System.Double,System.Double})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="T:DotNext.Threading.AtomicFloat">
            <summary>
            Various atomic operations for <see cref="T:System.Single"/> data type
            accessible as extension methods.
            </summary>
            <remarks>
            Methods exposed by this class provide volatile read/write
            of the field even if it is not declared as volatile field.
            </remarks>
            <seealso cref="T:System.Threading.Interlocked"/>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.VolatileGet(System.Single@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a
            memory barrier that prevents the processor from reordering memory operations
            as follows: If a read or write appears after this method in the code, the processor
            cannot move it before this method.
            </summary>
            <param name="value">The field to read.</param>
            <returns>
            The value that was read. This value is the latest written by any processor in
            the computer, regardless of the number of processors or the state of processor
            cache.
            </returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.VolatileSet(System.Single@,System.Single)">
            <summary>
            Writes the specified value to the specified field. On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations
            as follows: If a read or write appears before this method in the code, the processor
            cannot move it after this method.
            </summary>
            <param name="value">The field where the value is written.</param>
            <param name="newValue">
            The value to write. The value is written immediately so that it is visible to
            all processors in the computer.
            </param>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.IncrementAndGet(System.Single@)">
            <summary>
            Atomically increments by one referenced value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <returns>Incremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.DecrementAndGet(System.Single@)">
            <summary>
            Atomically decrements by one the current value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <returns>Decremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.Add(System.Single@,System.Single)">
            <summary>
            Adds two 64-bit floating-point numbers and replaces referenced storage with the sum, 
            as an atomic operation.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="operand">The value to be added to the currently stored integer.</param>
            <returns>Result of sum operation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.CompareAndSet(System.Single@,System.Single,System.Single)">
            <summary>
            Atomically sets referenced value to the given updated value if the current value == the expected value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.GetAndSet(System.Single@,System.Single)">
            <summary>
            Modifies referenced value atomically.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="update">A new value to be stored into managed pointer.</param>
            <returns>Original value before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.SetAndGet(System.Single@,System.Single)">
            <summary>
            Modifies value atomically.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="update">A new value to be stored into managed pointer.</param>
            <returns>A new value passed as argument.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.AccumulateAndGet(System.Single@,System.Single,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="value">Reference to a value to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.GetAndAccumulate(System.Single@,System.Single,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="value">Reference to a value to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.UpdateAndGet(System.Single@,System.Func{System.Single,System.Single})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.GetAndUpdate(System.Single@,System.Func{System.Single,System.Single})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.VolatileGet(System.Single[],System.Int64)">
            <summary>
            Performs volatile read of the array element.
            </summary>
            <param name="array">The array to read from.</param>
            <param name="index">The array element index.</param>
            <returns>The array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.VolatileSet(System.Single[],System.Int64,System.Single)">
            <summary>
            Performs volatile write to the array element.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The array element index.</param>
            <param name="value">The new value of the array element.</param>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.IncrementAndGet(System.Single[],System.Int64)">
            <summary>
            Atomically increments the array element by one.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The index of the element to increment atomically.</param>
            <returns>Incremented array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.DecrementAndGet(System.Single[],System.Int64)">
            <summary>
            Atomically decrements the array element by one.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The index of the array element to decrement atomically.</param>
            <returns>Decremented array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.CompareExchange(System.Single[],System.Int64,System.Single,System.Single)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="comparand">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.CompareAndSet(System.Single[],System.Int64,System.Single,System.Single)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.Add(System.Single[],System.Int64,System.Single)">
            <summary>
            Adds two 64-bit integers and replaces array element with the sum, 
            as an atomic operation.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="operand">The value to be added to the currently stored integer.</param>
            <returns>Result of sum operation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.GetAndSet(System.Single[],System.Int64,System.Single)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>Original array element before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.SetAndGet(System.Single[],System.Int64,System.Single)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>The array element after modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.AccumulateAndGet(System.Single[],System.Int64,System.Single,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.GetAndAccumulate(System.Single[],System.Int64,System.Single,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.UpdateAndGet(System.Single[],System.Int64,System.Func{System.Single,System.Single})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicFloat.GetAndUpdate(System.Single[],System.Int64,System.Func{System.Single,System.Single})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="T:DotNext.Threading.AtomicInteger">
            <summary>
            Various atomic operations for <see cref="T:System.Int32"/> data type
            accessible as extension methods.
            </summary>
            <remarks>
            Methods exposed by this class provide volatile read/write
            of the field even if it is not declared as volatile field.
            </remarks>
            <seealso cref="T:System.Threading.Interlocked"/>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.VolatileGet(System.Int32@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a
            memory barrier that prevents the processor from reordering memory operations
            as follows: If a read or write appears after this method in the code, the processor
            cannot move it before this method.
            </summary>
            <param name="value">The field to read.</param>
            <returns>
            The value that was read. This value is the latest written by any processor in
            the computer, regardless of the number of processors or the state of processor
            cache.
            </returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.VolatileSet(System.Int32@,System.Int32)">
            <summary>
            Writes the specified value to the specified field. On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations
            as follows: If a read or write appears before this method in the code, the processor
            cannot move it after this method.
            </summary>
            <param name="value">The field where the value is written.</param>
            <param name="newValue">
            The value to write. The value is written immediately so that it is visible to
            all processors in the computer.
            </param>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.IncrementAndGet(System.Int32@)">
            <summary>
            Atomically increments the referenced value by one.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <returns>Incremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.DecrementAndGet(System.Int32@)">
            <summary>
            Atomically decrements the referenced value by one.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <returns>Decremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.CompareAndSet(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Atomically sets the referenced value to the given updated value if the current value == the expected value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.Add(System.Int32@,System.Int32)">
            <summary>
            Adds two 32-bit integers and replaces referenced integer with the sum, 
            as an atomic operation.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="operand">The value to be added to the currently stored integer.</param>
            <returns>Result of sum operation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.GetAndSet(System.Int32@,System.Int32)">
            <summary>
            Modifies the referenced value atomically.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="update">A new value to be stored into managed pointer.</param>
            <returns>Original value before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.SetAndGet(System.Int32@,System.Int32)">
            <summary>
            Modifies the referenced value atomically.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="update">A new value to be stored into managed pointer.</param>
            <returns>A new value passed as argument.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.AccumulateAndGet(System.Int32@,System.Int32,System.Func{System.Int32,System.Int32,System.Int32})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="value">Reference to a value to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.GetAndAccumulate(System.Int32@,System.Int32,System.Func{System.Int32,System.Int32,System.Int32})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="value">Reference to a value to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.UpdateAndGet(System.Int32@,System.Func{System.Int32,System.Int32})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.GetAndUpdate(System.Int32@,System.Func{System.Int32,System.Int32})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.VolatileGet(System.Int32[],System.Int64)">
            <summary>
            Performs volatile read of the array element.
            </summary>
            <param name="array">The array to read from.</param>
            <param name="index">The array element index.</param>
            <returns>The array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.VolatileSet(System.Int32[],System.Int64,System.Int32)">
            <summary>
            Performs volatile write to the array element.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The array element index.</param>
            <param name="value">The new value of the array element.</param>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.IncrementAndGet(System.Int32[],System.Int64)">
            <summary>
            Atomically increments the array element by one.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The index of the element to increment atomically.</param>
            <returns>Incremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.DecrementAndGet(System.Int32[],System.Int64)">
            <summary>
            Atomically decrements the array element by one.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The index of the array element to decrement atomically.</param>
            <returns>Decremented array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.CompareExchange(System.Int32[],System.Int64,System.Int32,System.Int32)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="comparand">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.CompareAndSet(System.Int32[],System.Int64,System.Int32,System.Int32)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.Add(System.Int32[],System.Int64,System.Int32)">
            <summary>
            Adds two 32-bit integers and replaces array element with the sum, 
            as an atomic operation.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="operand">The value to be added to the currently stored integer.</param>
            <returns>Result of sum operation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.GetAndSet(System.Int32[],System.Int64,System.Int32)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>Original array element before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.SetAndGet(System.Int32[],System.Int64,System.Int32)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>The array element after modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.AccumulateAndGet(System.Int32[],System.Int64,System.Int32,System.Func{System.Int32,System.Int32,System.Int32})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.GetAndAccumulate(System.Int32[],System.Int64,System.Int32,System.Func{System.Int32,System.Int32,System.Int32})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.UpdateAndGet(System.Int32[],System.Int64,System.Func{System.Int32,System.Int32})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicInteger.GetAndUpdate(System.Int32[],System.Int64,System.Func{System.Int32,System.Int32})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="T:DotNext.Threading.AtomicLong">
            <summary>
            Various atomic operations for <see cref="T:System.Int64"/> data type
            accessible as extension methods.
            </summary>
            <remarks>
            Methods exposed by this class provide volatile read/write
            of the field even if it is not declared as volatile field.
            </remarks>
            <seealso cref="T:System.Threading.Interlocked"/>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.VolatileGet(System.Int64@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a
            memory barrier that prevents the processor from reordering memory operations
            as follows: If a read or write appears after this method in the code, the processor
            cannot move it before this method.
            </summary>
            <param name="value">The field to read.</param>
            <returns>
            The value that was read. This value is the latest written by any processor in
            the computer, regardless of the number of processors or the state of processor
            cache.
            </returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.VolatileSet(System.Int64@,System.Int64)">
            <summary>
            Writes the specified value to the specified field. On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations
            as follows: If a read or write appears before this method in the code, the processor
            cannot move it after this method.
            </summary>
            <param name="value">The field where the value is written.</param>
            <param name="newValue">
            The value to write. The value is written immediately so that it is visible to
            all processors in the computer.
            </param>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.IncrementAndGet(System.Int64@)">
            <summary>
            Atomically increments by one referenced value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <returns>Incremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.DecrementAndGet(System.Int64@)">
            <summary>
            Atomically decrements by one the current value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <returns>Decremented value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.CompareAndSet(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Atomically sets referenced value to the given updated value if the current value == the expected value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.Add(System.Int64@,System.Int64)">
            <summary>
            Adds two 64-bit integers and replaces referenced integer with the sum, 
            as an atomic operation.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="operand">The value to be added to the currently stored integer.</param>
            <returns>Result of sum operation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.GetAndSet(System.Int64@,System.Int64)">
            <summary>
            Modifies referenced value atomically.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="update">A new value to be stored into managed pointer.</param>
            <returns>Original value before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.SetAndGet(System.Int64@,System.Int64)">
            <summary>
            Modifies value atomically.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="update">A new value to be stored into managed pointer.</param>
            <returns>A new value passed as argument.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.AccumulateAndGet(System.Int64@,System.Int64,System.Func{System.Int64,System.Int64,System.Int64})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="value">Reference to a value to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.GetAndAccumulate(System.Int64@,System.Int64,System.Func{System.Int64,System.Int64,System.Int64})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="value">Reference to a value to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.UpdateAndGet(System.Int64@,System.Func{System.Int64,System.Int64})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.GetAndUpdate(System.Int64@,System.Func{System.Int64,System.Int64})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="value">Reference to a value to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.VolatileGet(System.Int64[],System.Int64)">
            <summary>
            Performs volatile read of the array element.
            </summary>
            <param name="array">The array to read from.</param>
            <param name="index">The array element index.</param>
            <returns>The array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.VolatileSet(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Performs volatile write to the array element.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The array element index.</param>
            <param name="value">The new value of the array element.</param>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.IncrementAndGet(System.Int64[],System.Int64)">
            <summary>
            Atomically increments the array element by one.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The index of the element to increment atomically.</param>
            <returns>Incremented array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.DecrementAndGet(System.Int64[],System.Int64)">
            <summary>
            Atomically decrements the array element by one.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The index of the array element to decrement atomically.</param>
            <returns>Decremented array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.CompareExchange(System.Int64[],System.Int64,System.Int64,System.Int64)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="comparand">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.CompareAndSet(System.Int64[],System.Int64,System.Int64,System.Int64)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.Add(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Adds two 64-bit integers and replaces array element with the sum, 
            as an atomic operation.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="operand">The value to be added to the currently stored integer.</param>
            <returns>Result of sum operation.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.GetAndSet(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>Original array element before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.SetAndGet(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>The array element after modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.AccumulateAndGet(System.Int64[],System.Int64,System.Int64,System.Func{System.Int64,System.Int64,System.Int64})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.GetAndAccumulate(System.Int64[],System.Int64,System.Int64,System.Func{System.Int64,System.Int64,System.Int64})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.UpdateAndGet(System.Int64[],System.Int64,System.Func{System.Int64,System.Int64})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicLong.GetAndUpdate(System.Int64[],System.Int64,System.Func{System.Int64,System.Int64})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="T:DotNext.Threading.AtomicReference">
            <summary>
            Provides atomic operations for the reference type.
            </summary>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.CompareAndSet``1(``0@,``0,``0)">
            <summary>
            Compares two values for equality and, if they are equal, 
            replaces the stored value.
            </summary>
            <typeparam name="T">Type of value in the memory storage.</typeparam>
            <param name="value">The value to update.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>true if successful. False return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.AccumulateAndGet``1(``0@,``0,System.Func{``0,``0,``0})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <typeparam name="T">Type of value in the memory storage.</typeparam>
            <param name="value">The value to update.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.GetAndAccumulate``1(``0@,``0,System.Func{``0,``0,``0})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <typeparam name="T">Type of value in the memory storage.</typeparam>
            <param name="value">The value to update.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.UpdateAndGet``1(``0@,System.Func{``0,``0})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the updated value.
            </summary>
            <typeparam name="T">Type of value in the memory storage.</typeparam>
            <param name="value">The value to update.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.GetAndUpdate``1(``0@,System.Func{``0,``0})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the original value.
            </summary>
            <typeparam name="T">Type of value in the memory storage.</typeparam>
            <param name="value">The value to update.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.VolatileGet``1(``0[],System.Int64)">
            <summary>
            Performs volatile read of the array element.
            </summary>
            <param name="array">The array to read from.</param>
            <param name="index">The array element index.</param>
            <returns>The array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.VolatileSet``1(``0[],System.Int64,``0)">
            <summary>
            Performs volatile write to the array element.
            </summary>
            <param name="array">The array to write into.</param>
            <param name="index">The array element index.</param>
            <param name="element">The new value of the array element.</param>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.CompareAndSet``1(``0[],System.Int64,``0,``0)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns><see langword="true"/> if successful. <see langword="false"/> return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.CompareExchange``1(``0[],System.Int64,``0,``0)">
            <summary>
            Atomically sets array element to the given updated value if the array element == the expected value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="comparand">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.GetAndSet``1(``0[],System.Int64,``0)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>Original array element before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.SetAndGet``1(``0[],System.Int64,``0)">
            <summary>
            Modifies the array element atomically.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of array element to be modified.</param>
            <param name="update">A new value to be stored as array element.</param>
            <returns>The array element after modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.AccumulateAndGet``1(``0[],System.Int64,``0,System.Func{``0,``0,``0})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.GetAndAccumulate``1(``0[],System.Int64,``0,System.Func{``0,``0,``0})">
            <summary>
            Atomically updates the array element with the results of applying the given function 
            to the array element and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the array element as its first argument, and the given update as the second argument.
            </remarks>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments.</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.UpdateAndGet``1(``0[],System.Int64,System.Func{``0,``0})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference.GetAndUpdate``1(``0[],System.Int64,System.Func{``0,``0})">
            <summary>
            Atomically updates the array element with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="array">The array to be modified.</param>
            <param name="index">The index of the array element to be modified.</param>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value of the array element.</returns>
        </member>
        <member name="T:DotNext.Threading.AtomicReference`1">
            <summary>
            Provides container with atomic operations
            for the reference type.
            </summary>
            <typeparam name="T">Type of object to be stored inside of container.</typeparam>
            <remarks>
            Use this structure in the declaration of integer
            value. volatile specifier is not needed for such field.
            Do not pass this structure by value into another methods,
            otherwise you will get a local copy of the reference
            not referred to the field.
            </remarks>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.#ctor(`0)">
            <summary>
            Initializes a new container with atomic operations 
            for the reference type.
            </summary>
            <param name="value">Initial value to be placed into container.</param>
        </member>
        <member name="P:DotNext.Threading.AtomicReference`1.Value">
            <summary>
            Provides volatile access to the reference value.
            </summary>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.CompareExchange(`0,`0)">
            <summary>
            Compares two values for equality and, if they are equal, 
            replaces the stored value.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>Original (previous) value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.CompareAndSet(`0,`0)">
            <summary>
            Compares two values for equality and, if they are equal, 
            replaces the stored value.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>true if successful. False return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.ToString">
            <summary>
            Returns textual representation of the stored value.
            </summary>
            <returns>The textual representation of the stored value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.Equals(`0)">
            <summary>
            Checks whether the stored value is equal to the given value.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns><see langword="true"/>, if the stored value is equal to <paramref name="other"/> value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.Equals(System.Object)">
            <summary>
            Checks whether the stored value is equal to the given value.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns><see langword="true"/>, if the stored value is equal to <paramref name="other"/> value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.GetHashCode">
            <summary>
            Computes hash code for the stored value.
            </summary>
            <returns>The hash code of the stored value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.GetAndSet(`0)">
            <summary>
            Modifies value of the container atomically.
            </summary>
            <param name="update">A new value to be stored inside of container.</param>
            <returns>Original value before modification.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.SetAndGet(`0)">
            <summary>
            Modifies value of the container atomically.
            </summary>
            <param name="update">A new value to be stored inside of container.</param>
            <returns>A new value passed as argument.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.AccumulateAndGet(`0,System.Func{`0,`0,`0})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the updated value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.GetAndAccumulate(`0,System.Func{`0,`0,`0})">
            <summary>
            Atomically updates the current value with the results of applying the given function 
            to the current and given values, returning the original value.
            </summary>
            <remarks>
            The function is applied with the current value as its first argument, and the given update as the second argument.
            </remarks>
            <param name="x">Accumulator operand.</param>
            <param name="accumulator">A side-effect-free function of two arguments</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.UpdateAndGet(System.Func{`0,`0})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the updated value.
            </summary>
            <param name="updater">A side-effect-free function</param>
            <returns>The updated value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.GetAndUpdate(System.Func{`0,`0})">
            <summary>
            Atomically updates the stored value with the results 
            of applying the given function, returning the original value.
            </summary>
            <param name="updater">A side-effect-free function</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.SetIfNull``1">
            <summary>
            Modifies stored value if it is null.
            </summary>
            <typeparam name="G">A derived type with default constructor.</typeparam>
            <returns>Modified value.</returns>
        </member>
        <member name="M:DotNext.Threading.AtomicReference`1.SetIfNull(System.Func{`0})">
            <summary>
            Modifies stored value if it is null.
            </summary>
            <param name="supplier">Supplier of a new value.</param>
            <returns>Modified value.</returns>
        </member>
        <member name="T:DotNext.Threading.CAS`1">
            <summary>
            Represents generic Compare-And-Set (CAS) operation.
            </summary>
            <typeparam name="T">Type of operands of CAS operation.</typeparam>
            <param name="value">Reference to a value to be modified.</param>
            <param name="expected">The expected value.</param>
            <param name="update">The new value.</param>
            <returns>true if successful. False return indicates that the actual value was not equal to the expected value.</returns>
        </member>
        <member name="T:DotNext.Threading.ConcurrentObjectPool`1">
            <summary>
            Provides concurrent object pool where
            object selection is thread-safe but not selected object.
            </summary>
            <typeparam name="T">Type of objects in the pool.</typeparam>
        </member>
        <member name="T:DotNext.Threading.ConcurrentObjectPool`1.Rental">
            <summary>
            Represents locked object.
            </summary>
            <remarks>
            Object lock cannot be stored in fields
            or escape call stack, therefore, it is ref-struct.
            </remarks>
        </member>
        <member name="M:DotNext.Threading.ConcurrentObjectPool`1.Rental.Dispose">
            <summary>
            Releases object lock and return it into pool.
            </summary>
        </member>
        <member name="M:DotNext.Threading.ConcurrentObjectPool`1.Rental.op_Implicit(DotNext.Threading.ConcurrentObjectPool{`0}.Rental)~`0">
            <summary>
            Gets channel/model associated with this lock.
            </summary>
            <param name="lock">Lock container.</param>
        </member>
        <member name="F:DotNext.Threading.ConcurrentObjectPool`1.objects">
            <summary>
            Read-only collection of objects in this pool.
            </summary>
        </member>
        <member name="M:DotNext.Threading.ConcurrentObjectPool`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new object pool.
            </summary>
            <param name="objects">Predefined objects to be available from the pool.</param>
        </member>
        <member name="M:DotNext.Threading.ConcurrentObjectPool`1.Rent">
            <summary>
            Select first unbusy object from pool, lock it and return it.
            </summary>
            <returns>First unbusy object locked for the caller thread.</returns>
        </member>
        <member name="T:DotNext.Threading.Lock">
            <summary>
            Represents unified representation monitor lock, read lock,
            write lock or upgradable read lock.
            </summary>
        </member>
        <member name="M:DotNext.Threading.Lock.Semaphore(System.Threading.SemaphoreSlim)">
            <summary>
            Creates semaphore-based lock but doesn't acquire lock.
            </summary>
            <param name="semaphore">The semaphore to wrap into lock object.</param>
            <returns>The lock representing semaphore.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.Monitor(System.Object)">
            <summary>
            Creates monitor-based lock control object but doesn't acquire lock.
            </summary>
            <param name="obj">Monitor lock target.</param>
            <returns>The lock representing monitor.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.Monitor">
            <summary>
            Creates exclusive lock.
            </summary>
            <returns>The exclusive lock.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.ReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Creates read lock but doesn't acquire it.
            </summary>
            <param name="rwLock">Read/write lock source.</param>
            <returns>Read-only lock.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.WriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Creates write lock but doesn't acquire it.
            </summary>
            <param name="rwLock">Read/write lock source.</param>
            <returns>Write-only lock.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.UpgradableReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Creates upgradable read lock but doesn't acquire.
            </summary>
            <param name="rwLock">Read/write lock source.</param>
            <returns>Upgradable read lock.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.Acquire">
            <summary>
            Acquires lock.
            </summary>
        </member>
        <member name="M:DotNext.Threading.Lock.TryAcquire">
            <summary>
            Attempts to acquire lock.
            </summary>
            <returns><see langword="true"/>, if lock is acquired successfully; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:DotNext.Threading.Lock.TryAcquire(System.TimeSpan)">
            <summary>
            Attempts to acquire lock.
            </summary>
            <param name="timeout">The amount of time to wait for the lock</param>
            <returns><see langword="true"/>, if lock is acquired successfully; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:DotNext.Threading.Lock.Dispose">
            <summary>
            Releases acquired lock.
            </summary>
        </member>
        <member name="M:DotNext.Threading.Lock.Equals(DotNext.Threading.Lock@)">
            <summary>
            Determines whether this lock object is the same as other lock.
            </summary>
            <param name="other">Other lock to compare.</param>
            <returns><see langword="true"/> if this lock is the same as the specified lock; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.Equals(System.Object)">
            <summary>
            Determines whether this lock object is the same as other lock.
            </summary>
            <param name="other">Other lock to compare.</param>
            <returns><see langword="true"/> if this lock is the same as the specified lock; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.GetHashCode">
            <summary>
            Computes hash code of this lock.
            </summary>
            <returns>The hash code of this lock.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.op_Equality(DotNext.Threading.Lock@,DotNext.Threading.Lock@)">
            <summary>
            Determines whether two locks are the same.
            </summary>
            <param name="first">The first lock to compare.</param>
            <param name="second">The second lock to compare.</param>
            <returns><see langword="true"/>, if both are the same; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.Lock.op_Inequality(DotNext.Threading.Lock@,DotNext.Threading.Lock@)">
            <summary>
            Determines whether two locks are not the same.
            </summary>
            <param name="first">The first lock to compare.</param>
            <param name="second">The second lock to compare.</param>
            <returns><see langword="true"/>, if both are not the same; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Threading.LockAcquisition">
            <summary>
            Provides a set of methods to acquire different types
            of lock.
            </summary>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.Lock``1(``0)">
            <summary>
            Acquires exclusive lock for the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">An object to be locked.</param>
            <returns>Lock control object.</returns>
            <remarks>
            This methods acquires monitor lock and equivalent 
            to <see href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/lock-statement">lock statement</see>.
            </remarks>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.Lock``1(``0,System.TimeSpan)">
            <summary>
            Acquires monitor lock.
            </summary>
            <typeparam name="T">Type of object to lock.</typeparam>
            <param name="obj">The object to lock.</param>
            <param name="timeout">The amount of time to wait for the lock.</param>
            <returns>The lock representing acquired monitor lock.</returns>
            <exception cref="T:System.TimeoutException">The lock cannot be acquired during the specified amount of time.</exception>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.Lock(System.Threading.SemaphoreSlim)">
            <summary>
            Blocks the current thread until it can enter the semaphore.
            </summary>
            <param name="semaphore">The semaphore.</param>
            <returns>The semaphore lock.</returns>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.Lock(System.Threading.SemaphoreSlim,System.TimeSpan)">
            <summary>
            Blocks the current thread until it can enter the semaphore.
            </summary>
            <param name="semaphore">The semaphore.</param>
            <param name="timeout">The amount of time to wait for the lock.</param>
            <returns>The semaphore lock.</returns>
            <exception cref="T:System.TimeoutException">The lock cannot be acquired during the specified amount of time.</exception>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.ReadLock``1(``0)">
            <summary>
            Acquires read lock for the specified object.
            </summary>
            <typeparam name="T">The type of the object to be locked.</typeparam>
            <param name="obj">The object to be locked.</param>
            <returns>The acquired read lock.</returns>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.ReadLock``1(``0,System.TimeSpan)">
            <summary>
            Acquires read lock for the specified object.
            </summary>
            <typeparam name="T">The type of the object to be locked.</typeparam>
            <param name="obj">The object to be locked.</param>
            <param name="timeout">The amount of time to wait for the lock.</param>
            <returns>The acquired read lock.</returns>
            <exception cref="T:System.TimeoutException">The lock cannot be acquired during the specified amount of time.</exception>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.ReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Acquires read lock.
            </summary>
            <param name="rwLock">Read/write lock provider.</param>
            <returns>The acquired read lock.</returns>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.ReadLock(System.Threading.ReaderWriterLockSlim,System.TimeSpan)">
            <summary>
            Acquires read lock.
            </summary>
            <param name="rwLock">Read/write lock provider.</param>
            <param name="timeout">The amount of time to wait for the lock.</param>
            <returns>The acquired read lock.</returns>
            <exception cref="T:System.TimeoutException">The lock cannot be acquired during the specified amount of time.</exception>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.WriteLock``1(``0)">
            <summary>
            Acquires write lock for the specified object.
            </summary>
            <typeparam name="T">The type of the object to be locked.</typeparam>
            <param name="obj">The object to be locked.</param>
            <returns>The acquired write lock.</returns>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.WriteLock``1(``0,System.TimeSpan)">
            <summary>
            Acquires write lock for the specified object.
            </summary>
            <typeparam name="T">The type of the object to be locked.</typeparam>
            <param name="obj">The object to be locked.</param>
            <param name="timeout">The amount of time to wait for the lock.</param>
            <returns>The acquired write lock.</returns>
            <exception cref="T:System.TimeoutException">The lock cannot be acquired during the specified amount of time.</exception>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.WriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Acquires write lock.
            </summary>
            <param name="rwLock">Read/write lock provider.</param>
            <returns>The acquired write lock.</returns>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.WriteLock(System.Threading.ReaderWriterLockSlim,System.TimeSpan)">
            <summary>
            Acquires write lock.
            </summary>
            <param name="rwLock">Read/write lock provider.</param>
            <param name="timeout">The amount of time to wait for the lock.</param>
            <returns>The acquired write lock.</returns>
            <exception cref="T:System.TimeoutException">The lock cannot be acquired during the specified amount of time.</exception>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.UpgradableReadLock``1(``0)">
            <summary>
            Acquires upgradable read lock for the specified object.
            </summary>
            <typeparam name="T">The type of the object to be locked.</typeparam>
            <param name="obj">The object to be locked.</param>
            <returns>The acquired upgradable read lock.</returns>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.UpgradableReadLock``1(``0,System.TimeSpan)">
            <summary>
            Acquires upgradable read lock for the specified object.
            </summary>
            <typeparam name="T">The type of the object to be locked.</typeparam>
            <param name="obj">The object to be locked.</param>
            <param name="timeout">The amount of time to wait for the lock.</param>
            <returns>The acquired upgradable read lock.</returns>
            <exception cref="T:System.TimeoutException">The lock cannot be acquired during the specified amount of time.</exception>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.UpgradableReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Acquires upgradable read lock.
            </summary>
            <param name="rwLock">Read/write lock provider.</param>
            <returns>The acquired upgradable read lock.</returns>
        </member>
        <member name="M:DotNext.Threading.LockAcquisition.UpgradableReadLock(System.Threading.ReaderWriterLockSlim,System.TimeSpan)">
            <summary>
            Acquires upgradable read lock.
            </summary>
            <param name="rwLock">Read/write lock provider.</param>
            <param name="timeout">The amount of time to wait for the lock.</param>
            <returns>The acquired upgradable read lock.</returns>
            <exception cref="T:System.TimeoutException">The lock cannot be acquired during the specified amount of time.</exception>
        </member>
        <member name="T:DotNext.Threading.Tasks.Conversion">
            <summary>
            Provides task result conversion methods.
            </summary>
        </member>
        <member name="M:DotNext.Threading.Tasks.Conversion.Convert``2(System.Threading.Tasks.Task{``0},System.Converter{``0,``1})">
            <summary>
            Converts one type of task into another.
            </summary>
            <typeparam name="I">The source task type.</typeparam>
            <typeparam name="O">The target task type.</typeparam>
            <param name="task">The task to convert.</param>
            <param name="converter">Non-blocking conversion function.</param>
            <returns>The converted task.</returns>
        </member>
        <member name="M:DotNext.Threading.Tasks.Conversion.Convert``2(System.Threading.Tasks.Task{``0},System.Converter{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Converts one type of task into another.
            </summary>
            <typeparam name="I">The source task type.</typeparam>
            <typeparam name="O">The target task type.</typeparam>
            <param name="task">The task to convert.</param>
            <param name="converter">Asynchronous conversion function.</param>
            <returns>The converted task.</returns>
        </member>
        <member name="T:DotNext.Threading.Tasks.Synchronization">
            <summary>
            Represents task synchronization methods.
            </summary>
        </member>
        <member name="M:DotNext.Threading.Tasks.Synchronization.GetResult``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Gets task result synchronously.
            </summary>
            <param name="task">The task to synchronize.</param>
            <param name="timeout">Synchronization timeout.</param>
            <typeparam name="R">Type of task result.</typeparam>
            <returns>Task result.</returns>
            <exception cref="T:System.TimeoutException">Task is not completed.</exception>
        </member>
        <member name="M:DotNext.Threading.Tasks.Synchronization.GetResult``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Gets task result synchronously.
            </summary>
            <param name="task">The task to synchronize.</param>
            <param name="token">Cancellation token.</param>
            <typeparam name="R">Type of task result.</typeparam>
            <returns>Task result.</returns>
            <exception cref="T:System.TimeoutException">Task is not completed.</exception>
        </member>
        <member name="M:DotNext.Threading.Tasks.Synchronization.WhenAll``2(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1})">
            <summary>
            Creates a task that will complete when all of the passed tasks have completed.
            </summary>
            <typeparam name="T1">The type of the first task.</typeparam>
            <typeparam name="T2">The type of the second task.</typeparam>
            <param name="task1">The first task to await.</param>
            <param name="task2">The second task to await.</param>
            <returns>The task containing results of both tasks.</returns>
        </member>
        <member name="M:DotNext.Threading.Tasks.Synchronization.WhenAll``3(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2})">
            <summary>
            Creates a task that will complete when all of the passed tasks have completed.
            </summary>
            <typeparam name="T1">The type of the first task.</typeparam>
            <typeparam name="T2">The type of the second task.</typeparam>
            <typeparam name="T3">The type of the third task.</typeparam>
            <param name="task1">The first task to await.</param>
            <param name="task2">The second task to await.</param>
            <param name="task3">The third task to await.</param>
            <returns>The task containing results of all tasks.</returns>
        </member>
        <member name="M:DotNext.Threading.Tasks.Synchronization.WhenAll``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3})">
            <summary>
            Creates a task that will complete when all of the passed tasks have completed.
            </summary>
            <typeparam name="T1">The type of the first task.</typeparam>
            <typeparam name="T2">The type of the second task.</typeparam>
            <typeparam name="T3">The type of the third task.</typeparam>
            <typeparam name="T4">The type of the fourth task.</typeparam>
            <param name="task1">The first task to await.</param>
            <param name="task2">The second task to await.</param>
            <param name="task3">The third task to await.</param>
            <param name="task4">The fourth task to await.</param>
            <returns>The task containing results of all tasks.</returns>
        </member>
        <member name="M:DotNext.Threading.Tasks.Synchronization.WhenAll``5(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3},System.Threading.Tasks.Task{``4})">
            <summary>
            Creates a task that will complete when all of the passed tasks have completed.
            </summary>
            <typeparam name="T1">The type of the first task.</typeparam>
            <typeparam name="T2">The type of the second task.</typeparam>
            <typeparam name="T3">The type of the third task.</typeparam>
            <typeparam name="T4">The type of the fourth task.</typeparam>
            <typeparam name="T5">The type of the fifth task.</typeparam>
            <param name="task1">The first task to await.</param>
            <param name="task2">The second task to await.</param>
            <param name="task3">The third task to await.</param>
            <param name="task4">The fourth task to await.</param>
            <param name="task5">The fifth task to await.</param>
            <returns>The task containing results of all tasks.</returns>
        </member>
        <member name="T:DotNext.Threading.Timeout">
            <summary>
            Helps to compute timeout for asynchronous operations.
            </summary>
        </member>
        <member name="M:DotNext.Threading.Timeout.#ctor(System.TimeSpan)">
            <summary>
            Constructs a new timeout control object.
            </summary>
            <param name="timeout">Max duration of operation.</param>
        </member>
        <member name="P:DotNext.Threading.Timeout.Expired">
            <summary>
            Indicates that timeout is reached.
            </summary>
        </member>
        <member name="M:DotNext.Threading.Timeout.ThrowIfExpired">
            <summary>
            Throws <see cref="T:System.TimeoutException"/> if timeout occurs.
            </summary>
        </member>
        <member name="M:DotNext.Threading.Timeout.op_True(DotNext.Threading.Timeout@)">
            <summary>
            Indicates that timeout is reached.
            </summary>
            <param name="timeout">Timeout control object.</param>
            <returns><see langword="true"/>, if timeout is reached; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.Timeout.op_False(DotNext.Threading.Timeout@)">
            <summary>
            Indicates that timeout is not reached.
            </summary>
            <param name="timeout">Timeout control object.</param>
            <returns><see langword="false"/>, if timeout is not reached; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Threading.Timeout.op_Implicit(DotNext.Threading.Timeout@)~System.TimeSpan">
            <summary>
            Extracts original timeout value from this object.
            </summary>
            <param name="timeout">Timeout control object.</param>
            <returns>The original timeout value.</returns>
        </member>
        <member name="T:DotNext.UserDataSlot`1">
            <summary>
            Uniquely identifies user data which can be associated
            with any object.
            </summary>
        </member>
        <member name="F:DotNext.UserDataSlot`1.Id">
            <summary>
            Unique identifier of the data slot.
            </summary>
        </member>
        <member name="M:DotNext.UserDataSlot`1.Allocate">
            <summary>
            Allocates a new data slot.
            </summary>
            <returns>Allocated data slot.</returns>
        </member>
        <member name="M:DotNext.UserDataSlot`1.Equals(DotNext.UserDataSlot{`0})">
            <summary>
            Checks whether the two data slots are the same.
            </summary>
            <param name="other">Other data slot to check.</param>
            <returns><see langword="true"/> if both data slots identifies the same data key.</returns>
        </member>
        <member name="M:DotNext.UserDataSlot`1.Equals(System.Object)">
            <summary>
            Checks whether the two data slots are the same.
            </summary>
            <param name="other">Other data slot to check.</param>
            <returns><see langword="true"/> if both data slots identifies the same data key.</returns>
        </member>
        <member name="M:DotNext.UserDataSlot`1.GetHashCode">
            <summary>
            Computes hash code for this data slot.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:DotNext.UserDataSlot`1.ToString">
            <summary>
            Gets textual representation of this data slot
            useful for debugging.
            </summary>
            <returns>Textual representation of this data slot.</returns>
        </member>
        <member name="M:DotNext.UserDataSlot`1.op_Equality(DotNext.UserDataSlot{`0},DotNext.UserDataSlot{`0})">
            <summary>
            Checks whether the two data slots are the same.
            </summary>
            <param name="first">The first data slot to check.</param>
            <param name="second">The second data slot to check.</param>
            <returns><see langword="true"/> if both data slots identifies the same data key.</returns>
        </member>
        <member name="M:DotNext.UserDataSlot`1.op_Inequality(DotNext.UserDataSlot{`0},DotNext.UserDataSlot{`0})">
            <summary>
            Checks whether the two data slots are not the same.
            </summary>
            <param name="first">The first data slot to check.</param>
            <param name="second">The second data slot to check.</param>
            <returns><see langword="false"/> if both data slots identifies the same data key.</returns>
        </member>
        <member name="T:DotNext.UserDataStorage">
            <summary>
            Provides access to user data associated with the object.
            </summary>
            <remarks>
            This is by-ref struct because user data should have
            the same lifetime as its owner.
            </remarks>
        </member>
        <member name="M:DotNext.UserDataStorage.Get``1(DotNext.UserDataSlot{``0},``0)">
            <summary>
            Gets user data.
            </summary>
            <typeparam name="V">Type of data.</typeparam>
            <param name="slot">The slot identifying user data.</param>
            <param name="defaultValue">Default value to be returned if no user data contained in this collection.</param>
            <returns>User data.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.GetOrSet``1(DotNext.UserDataSlot{``0})">
            <summary>
            Gets existing user data or creates a new data and return it.
            </summary>
            <typeparam name="V">The type of user data associated with arbitrary object.</typeparam>
            <param name="slot">The slot identifying user data.</param>
            <returns>The data associated with the slot.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.GetOrSet``1(DotNext.UserDataSlot{``0},System.Func{``0})">
            <summary>
            Gets existing user data or creates a new data and return it.
            </summary>
            <typeparam name="V">The type of user data associated with arbitrary object.</typeparam>
            <param name="slot">The slot identifying user data.</param>
            <param name="valueFactory">The value supplier which is called when no user data exists.</param>
            <returns>The data associated with the slot.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.TryGet``1(DotNext.UserDataSlot{``0},``0@)">
            <summary>
            Tries to get user data.
            </summary>
            <typeparam name="V">Type of data.</typeparam>
            <param name="slot">The slot identifying user data.</param>
            <param name="userData">User data.</param>
            <returns><see langword="true"/>, if user data slot exists in this collection.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.Set``1(DotNext.UserDataSlot{``0},``0)">
            <summary>
            Sets user data.
            </summary>
            <typeparam name="V">Type of data.</typeparam>
            <param name="slot">The slot identifying user data.</param>
            <param name="userData">User data to be saved in this collection.</param>
        </member>
        <member name="M:DotNext.UserDataStorage.Remove``1(DotNext.UserDataSlot{``0})">
            <summary>
            Removes user data slot.
            </summary>
            <typeparam name="V">The type of user data.</typeparam>
            <param name="slot">The slot identifying user data.</param>
            <returns><see langword="true"/>, if data is removed from this collection.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.Remove``1(DotNext.UserDataSlot{``0},``0@)">
            <summary>
            Removes user data slot.
            </summary>
            <typeparam name="V">The type of user data.</typeparam>
            <param name="slot">The slot identifying user data.</param>
            <param name="userData">Remove user data.</param>
            <returns><see langword="true"/>, if data is removed from this collection.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.GetHashCode">
            <summary>
            Computes identity hash code for this storage.
            </summary>
            <returns>The identity hash code for this storage.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.Equals(System.Object)">
            <summary>
            Determines whether this storage is attached to
            the given object.
            </summary>
            <param name="other">Other object to check.</param>
            <returns><see langword="true"/>, if this storage is attached to <paramref name="other"/> object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.ToString">
            <summary>
            Returns textual representation of this storage.
            </summary>
            <returns>The textual representation of this storage.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.op_Equality(DotNext.UserDataStorage,DotNext.UserDataStorage)">
            <summary>
            Determines whether two storages are for the same object.
            </summary>
            <param name="first">The first storage to compare.</param>
            <param name="second">The second storage to compare.</param>
            <returns><see langword="true"/>, if two storages are for the same object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.UserDataStorage.op_Inequality(DotNext.UserDataStorage,DotNext.UserDataStorage)">
            <summary>
            Determines whether two storages are not for the same object.
            </summary>
            <param name="first">The first storage to compare.</param>
            <param name="second">The second storage to compare.</param>
            <returns><see langword="true"/>, if two storages are not for the same object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.ValueType`1">
            <summary>
            Provides fast memory operations to work with value type.
            </summary>
            <typeparam name="T">Value type.</typeparam>
        </member>
        <member name="P:DotNext.ValueType`1.Size">
            <summary>
            Size of value type, in bytes.
            </summary>
        </member>
        <member name="P:DotNext.ValueType`1.Default">
            <summary>
            Default value of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="F:DotNext.ValueType`1.IsPrimitive">
            <summary>
            Indicates that value type is primitive type.
            </summary>
        </member>
        <member name="P:DotNext.ValueType`1.EqualityComparer">
            <summary>
            Equality comparer for the value type based on its bitwise representation.
            </summary>
        </member>
        <member name="P:DotNext.ValueType`1.Comparer">
            <summary>
            Value comparer for the value type based on its bitwise representation.
            </summary>
        </member>
        <member name="M:DotNext.ValueType`1.BitwiseEquals``1(`0,``0)">
            <summary>
            Checks bitwise equality between two values of different value types.
            </summary>
            <remarks>
            This method doesn't use <see cref="M:System.Object.Equals(System.Object)"/>
            even if it is overridden by value type.
            </remarks>
            <typeparam name="U">Type of second value.</typeparam>
            <param name="first">The first value to check.</param>
            <param name="second">The second value to check.</param>
            <returns><see langword="true"/>, if both values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.BitwiseEquals(`0,`0)">
            <summary>
            Checks bitwise equality between two values of the same value type.
            </summary>
            <remarks>
            This method doesn't use <see cref="M:System.Object.Equals(System.Object)"/>
            even if it is overridden by value type.
            </remarks>
            <param name="first">The first value to check.</param>
            <param name="second">The second value to check.</param>
            <returns><see langword="true"/>, if both values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.BitwiseHashCode(`0,System.Int32,System.Func{System.Int32,System.Int32,System.Int32},System.Boolean)">
            <summary>
            Computes bitwise hash code for the specified value.
            </summary>
            <remarks>
            This method doesn't use <see cref="M:System.Object.GetHashCode"/>
            even if it is overridden by value type.
            </remarks>
            <param name="value">A value to be hashed.</param>
            <param name="hash">Initial value of the hash.</param>
            <param name="hashFunction">Hashing function.</param>
            <param name="salted">True to include randomized salt data into hashing; false to use data from memory only.</param>
            <returns>Bitwise hash code.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.BitwiseHashCode(`0,System.Boolean)">
            <summary>
            Computes hash code for the structure content.
            </summary>
            <param name="value">Value to be hashed.</param>
            <param name="salted">True to include randomized salt data into hashing; false to use data from memory only.</param>
            <returns>Content hash code.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.IsDefault(`0)">
            <summary>
            Indicates that specified value type is the default value.
            </summary>
            <param name="value">Value to check.</param>
            <returns><see langword="true"/>, if value is default value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.AsBinary(`0)">
            <summary>
            Convert value type content into array of bytes.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>An array of bytes representing binary content of value type.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.BitwiseCompare(`0,`0)">
            <summary>
            Compares bits of two values of the same type.
            </summary>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.BitwiseCompare``1(`0,``0)">
            <summary>
            Compares bits of two values of the different type.
            </summary>
            <typeparam name="U">Type of the second value.</typeparam>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.BitCast``1(`0@,``0@)">
            <summary>
            Obtain a value of type <typeparamref name="TO"/> by 
            reinterpreting the object representation of <typeparamref name="T"/>. 
            </summary>
            <remarks>
            Every bit in the value representation of the returned <typeparamref name="TO"/> object 
            is equal to the corresponding bit in the object representation of <typeparamref name="T"/>. 
            The values of padding bits in the returned <typeparamref name="TO"/> object are unspecified. 
            The method takes into account size of <typeparamref name="T"/> and <typeparamref name="TO"/> types
            and able to provide conversion between types of different size.
            </remarks>
            <param name="input">A value to convert.</param>
            <param name="output">Conversion result.</param>
            <typeparam name="TO">The type of output struct.</typeparam>
        </member>
        <member name="M:DotNext.ValueType`1.#ctor(`0)">
            <summary>
            Initializes a new boxed value type.
            </summary>
            <param name="value">A struct to be placed onto heap.</param>
        </member>
        <member name="M:DotNext.ValueType`1.GetPinnableReference">
            <summary>
            Gets pinnable reference to the boxed value.
            </summary>
            <returns>Pinnnable reference.</returns>
        </member>
        <member name="M:DotNext.ValueType`1.op_Implicit(DotNext.ValueType{`0})~`0">
            <summary>
            Unbox value type.
            </summary>
            <param name="box">Boxed representation of value type to unbox.</param>
        </member>
        <member name="T:DotNext.ValueTypeExtensions">
            <summary>
            Various extensions for value types.
            </summary>
        </member>
        <member name="M:DotNext.ValueTypeExtensions.BitCast``2(``0,``1@)">
            <summary>
            Obtain a value of type <typeparamref name="TO"/> by 
            reinterpreting the object representation of <typeparamref name="FROM"/>.
            </summary>
            <param name="input">A value to convert.</param>
            <param name="output">Conversion result.</param>
            <typeparam name="FROM">The type of input struct.</typeparam>
            <typeparam name="TO">The type of output struct.</typeparam>
            <seealso cref="M:DotNext.ValueType`1.BitCast``1(`0@,``0@)"/>
        </member>
        <member name="M:DotNext.ValueTypeExtensions.BitCast``2(``0)">
            <summary>
            Obtain a value of type <typeparamref name="TO"/> by 
            reinterpreting the object representation of <typeparamref name="FROM"/>. 
            </summary>
            <remarks>
            Every bit in the value representation of the returned <typeparamref name="TO"/> object 
            is equal to the corresponding bit in the object representation of <typeparamref name="FROM"/>. 
            The values of padding bits in the returned <typeparamref name="TO"/> object are unspecified. 
            The method takes into account size of <typeparamref name="FROM"/> and <typeparamref name="TO"/> types
            and able to provide conversion between types of different size.
            </remarks>
            <param name="input">A value to convert.</param>
            <typeparam name="FROM">The type of input struct.</typeparam>
            <typeparam name="TO">The type of output struct.</typeparam>
            <returns>Conversion result.</returns>
        </member>
        <member name="M:DotNext.ValueTypeExtensions.IsOneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the specified value is equal to one
            of the specified values.
            </summary>
            <remarks>
            This method uses <see cref="M:System.IEquatable`1.Equals(`0)"/>
            to check equality between two values.
            </remarks>
            <typeparam name="T">The type of object to compare.</typeparam>
            <param name="value">The value to compare with other.</param>
            <param name="values">Candidate objects.</param>
            <returns><see langword="true"/>, if <paramref name="value"/> is equal to one of <paramref name="values"/>.</returns>
        </member>
        <member name="M:DotNext.ValueTypeExtensions.IsOneOf``1(``0,``0[])">
            <summary>
            Checks whether the specified value is equal to one
            of the specified values.
            </summary>
            <remarks>
            This method uses <see cref="M:System.IEquatable`1.Equals(`0)"/>
            to check equality between two values.
            </remarks>
            <typeparam name="T">The type of object to compare.</typeparam>
            <param name="value">The value to compare with other.</param>
            <param name="values">Candidate objects.</param>
            <returns><see langword="true"/>, if <paramref name="value"/> is equal to one of <paramref name="values"/>.</returns>
        </member>
        <member name="M:DotNext.ValueTypeExtensions.Box``1(``0)">
            <summary>
            Create boxed representation of the value type.
            </summary>
            <param name="value">Value to be placed into heap.</param>
            <typeparam name="T">Value type.</typeparam>
            <returns>Boxed representation of value type.</returns>
        </member>
        <member name="T:DotNext.VariantType.IVariant">
            <summary>
            A root interface for all variant data containers.
            </summary>
        </member>
        <member name="P:DotNext.VariantType.IVariant.Value">
            <summary>
            Gets value stored in the container.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.IVariant.Equals``1(``0)">
            <summary>
            Determines whether the value stored in this variant
            container is equal to the value stored in the given variant
            container.
            </summary>
            <typeparam name="V">The type of variant container.</typeparam>
            <param name="other">Other variant value to compare.</param>
            <returns>
            <see langword="true"/>, if the value stored in this variant
            container is equal to the value stored in the given variant
            container; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DotNext.VariantType.Variant`2">
            <summary>
            Represents value that can be one of two possible types.
            </summary>
            <remarks>
            Variant data type is fully compatible with <see langword="dynamic"/>
            keyword and late binding.
            </remarks>
            <typeparam name="T1">First possible type.</typeparam>
            <typeparam name="T2">Second possible type.</typeparam>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.#ctor(`0)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T1"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.#ctor(`1)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T2"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="P:DotNext.VariantType.Variant`2.IsPresent">
            <summary>
            Indicates that this container stores non-<see langword="null"/> value.
            </summary>
        </member>
        <member name="P:DotNext.VariantType.Variant`2.First">
            <summary>
            Interprets stored value as <typeparamref name="T1"/>.
            </summary>
        </member>
        <member name="P:DotNext.VariantType.Variant`2.Second">
            <summary>
            Interprets stored value as <typeparamref name="T2"/>.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.Convert``1(System.Converter{`0,``0},System.Converter{`1,``0})">
            <summary>
            Converts the stored value.
            </summary>
            <typeparam name="R">The type of conversion result.</typeparam>
            <param name="mapper1">The converter for the first possible type.</param>
            <param name="mapper2">The converter for the second possible type.</param>
            <returns>Conversion result; or <see cref="P:DotNext.Optional`1.Empty"/> if stored value is <see langword="null"/>.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.Convert``2(System.Converter{`0,``0},System.Converter{`1,``1})">
            <summary>
            Converts this variant value into another value.
            </summary>
            <typeparam name="U1">The first possible type of the conversion result.</typeparam>
            <typeparam name="U2">The second possible type of the conversion result.</typeparam>
            <param name="mapper1">The converter for the first possible type.</param>
            <param name="mapper2">The converter for the second possible type.</param>
            <returns>The variant value converted from this variant value.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.Permute">
            <summary>
            Change order of type parameters.
            </summary>
            <returns>A copy of variant value with changed order of type parameters.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.op_Implicit(`0)~DotNext.VariantType.Variant{`0,`1}">
            <summary>
            Converts value of type <typeparamref name="T1"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.op_Explicit(DotNext.VariantType.Variant{`0,`1})~`0">
            <summary>
            Converts variant value into type <typeparamref name="T1"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T1"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T1"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.op_Implicit(`1)~DotNext.VariantType.Variant{`0,`1}">
            <summary>
            Converts value of type <typeparamref name="T2"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.op_Explicit(DotNext.VariantType.Variant{`0,`1})~`1">
            <summary>
            Converts variant value into type <typeparamref name="T2"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T2"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T2"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.Equals``1(``0)">
            <summary>
            Determines whether the value stored in this variant
            container is equal to the value stored in the given variant
            container.
            </summary>
            <typeparam name="V">The type of variant container.</typeparam>
            <param name="other">Other variant value to compare.</param>
            <returns>
            <see langword="true"/>, if the value stored in this variant
            container is equal to the value stored in the given variant
            container; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.op_Equality(DotNext.VariantType.Variant{`0,`1},DotNext.VariantType.Variant{`0,`1})">
            <summary>
            Determines whether the two variant values are equal.
            </summary>
            <remarks>
            This operator uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/>
            to compare stored values.
            </remarks>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns><see langword="true"/>, if variant values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.op_Inequality(DotNext.VariantType.Variant{`0,`1},DotNext.VariantType.Variant{`0,`1})">
            <summary>
            Determines whether the two variant values are not equal.
            </summary>
            <remarks>
            This operator uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/>
            to compare stored values.
            </remarks>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns><see langword="true"/>, if variant values are not equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.op_True(DotNext.VariantType.Variant{`0,`1})">
            <summary>
            Indicates that variant value is non-<see langword="null"/> value.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.op_False(DotNext.VariantType.Variant{`0,`1})">
            <summary>
            Indicates that variant value is <see langword="null"/> value.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.ToString">
            <summary>
            Provides textual representation of the stored value.
            </summary>
            <remarks>
            This method calls virtual method <see cref="M:System.Object.ToString"/>
            for the stored value.
            </remarks>
            <returns>The textual representation of the stored value.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.GetHashCode">
            <summary>
            Computes hash code for the stored value.
            </summary>
            <returns>The hash code of the stored value.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`2.Equals(System.Object)">
            <summary>
            Determines whether stored value is equal to the given value.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns><see langword="true"/>, if stored value is equal to <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.VariantType.Variant`3">
            <summary>
            Represents value that can be one of three possible types.
            </summary>
            <remarks>
            Variant data type is fully compatible with <see langword="dynamic"/>
            keyword and late binding.
            </remarks>
            <typeparam name="T1">First possible type.</typeparam>
            <typeparam name="T2">Second possible type.</typeparam>
            <typeparam name="T3">Third possible type.</typeparam>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.#ctor(`0)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T1"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.#ctor(`1)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T2"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.#ctor(`2)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T3"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="P:DotNext.VariantType.Variant`3.IsPresent">
            <summary>
            Indicates that this container stores non-<see langword="null"/> value.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.Permute">
            <summary>
            Change order of type parameters.
            </summary>
            <returns>A copy of variant value with changed order of type parameters.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.Equals``1(``0)">
            <summary>
            Determines whether the value stored in this variant
            container is equal to the value stored in the given variant
            container.
            </summary>
            <typeparam name="V">The type of variant container.</typeparam>
            <param name="other">Other variant value to compare.</param>
            <returns>
            <see langword="true"/>, if the value stored in this variant
            container is equal to the value stored in the given variant
            container; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Equality(DotNext.VariantType.Variant{`0,`1,`2},DotNext.VariantType.Variant{`0,`1,`2})">
            <summary>
            Determines whether the two variant values are equal.
            </summary>
            <remarks>
            This operator uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/>
            to compare stored values.
            </remarks>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns><see langword="true"/>, if variant values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Inequality(DotNext.VariantType.Variant{`0,`1,`2},DotNext.VariantType.Variant{`0,`1,`2})">
            <summary>
            Determines whether the two variant values are not equal.
            </summary>
            <remarks>
            This operator uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/>
            to compare stored values.
            </remarks>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns><see langword="true"/>, if variant values are not equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Implicit(`0)~DotNext.VariantType.Variant{`0,`1,`2}">
            <summary>
            Converts value of type <typeparamref name="T1"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Explicit(DotNext.VariantType.Variant{`0,`1,`2})~`0">
            <summary>
            Converts variant value into type <typeparamref name="T1"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T1"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T1"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Implicit(`1)~DotNext.VariantType.Variant{`0,`1,`2}">
            <summary>
            Converts value of type <typeparamref name="T2"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Explicit(DotNext.VariantType.Variant{`0,`1,`2})~`1">
            <summary>
            Converts variant value into type <typeparamref name="T2"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T2"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T2"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Implicit(`2)~DotNext.VariantType.Variant{`0,`1,`2}">
            <summary>
            Converts value of type <typeparamref name="T3"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Explicit(DotNext.VariantType.Variant{`0,`1,`2})~`2">
            <summary>
            Converts variant value into type <typeparamref name="T3"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T3"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T3"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_Implicit(DotNext.VariantType.Variant{`0,`1})~DotNext.VariantType.Variant{`0,`1,`2}">
            <summary>
            Converts variant value of two possible types into variant value
            of three possibles types.
            </summary>
            <param name="variant">The variant value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_True(DotNext.VariantType.Variant{`0,`1,`2})">
            <summary>
            Indicates that variant value is non-<see langword="null"/> value.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.op_False(DotNext.VariantType.Variant{`0,`1,`2})">
            <summary>
            Indicates that variant value is <see langword="null"/> value.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.ToString">
            <summary>
            Provides textual representation of the stored value.
            </summary>
            <remarks>
            This method calls virtual method <see cref="M:System.Object.ToString"/>
            for the stored value.
            </remarks>
            <returns>The textual representation of the stored value.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.GetHashCode">
            <summary>
            Computes hash code for the stored value.
            </summary>
            <returns>The hash code of the stored value.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`3.Equals(System.Object)">
            <summary>
            Determines whether stored value is equal to the given value.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns><see langword="true"/>, if stored value is equal to <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.VariantType.Variant`4">
            <summary>
            Represents value that can be one of three possible types.
            </summary>
            <remarks>
            Variant data type is fully compatible with <see langword="dynamic"/>
            keyword and late binding.
            </remarks>
            <typeparam name="T1">First possible type.</typeparam>
            <typeparam name="T2">Second possible type.</typeparam>
            <typeparam name="T3">Third possible type.</typeparam>
            <typeparam name="T4">Fourth possible type.</typeparam>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.#ctor(`0)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T1"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.#ctor(`1)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T2"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.#ctor(`2)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T3"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.#ctor(`3)">
            <summary>
            Creates a new variant value from value of type <typeparamref name="T4"/>.
            </summary>
            <param name="value">The value to be placed into variant container.</param>
        </member>
        <member name="P:DotNext.VariantType.Variant`4.IsPresent">
            <summary>
            Indicates that this container stores non-<see langword="null"/> value.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.Permute">
            <summary>
            Change order of type parameters.
            </summary>
            <returns>A copy of variant value with changed order of type parameters.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.Equals``1(``0)">
            <summary>
            Determines whether the value stored in this variant
            container is equal to the value stored in the given variant
            container.
            </summary>
            <typeparam name="V">The type of variant container.</typeparam>
            <param name="other">Other variant value to compare.</param>
            <returns>
            <see langword="true"/>, if the value stored in this variant
            container is equal to the value stored in the given variant
            container; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Equality(DotNext.VariantType.Variant{`0,`1,`2,`3},DotNext.VariantType.Variant{`0,`1,`2,`3})">
            <summary>
            Determines whether the two variant values are equal.
            </summary>
            <remarks>
            This operator uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/>
            to compare stored values.
            </remarks>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns><see langword="true"/>, if variant values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Inequality(DotNext.VariantType.Variant{`0,`1,`2,`3},DotNext.VariantType.Variant{`0,`1,`2,`3})">
            <summary>
            Determines whether the two variant values are not equal.
            </summary>
            <remarks>
            This operator uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/>
            to compare stored values.
            </remarks>
            <param name="first">The first value to compare.</param>
            <param name="second">The second value to compare.</param>
            <returns><see langword="true"/>, if variant values are not equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Implicit(`0)~DotNext.VariantType.Variant{`0,`1,`2,`3}">
            <summary>
            Converts value of type <typeparamref name="T1"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Explicit(DotNext.VariantType.Variant{`0,`1,`2,`3})~`0">
            <summary>
            Converts variant value into type <typeparamref name="T2"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T1"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T1"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Implicit(`1)~DotNext.VariantType.Variant{`0,`1,`2,`3}">
            <summary>
            Converts value of type <typeparamref name="T2"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Explicit(DotNext.VariantType.Variant{`0,`1,`2,`3})~`1">
            <summary>
            Converts variant value into type <typeparamref name="T2"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T2"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T2"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Implicit(`2)~DotNext.VariantType.Variant{`0,`1,`2,`3}">
            <summary>
            Converts value of type <typeparamref name="T3"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Explicit(DotNext.VariantType.Variant{`0,`1,`2,`3})~`2">
            <summary>
            Converts variant value into type <typeparamref name="T3"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T3"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T3"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Implicit(`3)~DotNext.VariantType.Variant{`0,`1,`2,`3}">
            <summary>
            Converts value of type <typeparamref name="T4"/> into variant.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Explicit(DotNext.VariantType.Variant{`0,`1,`2,`3})~`3">
            <summary>
            Converts variant value into type <typeparamref name="T4"/>.
            </summary>
            <param name="var">Variant value to convert into type <typeparamref name="T4"/>; or <see langword="null"/> if current value is not of type <typeparamref name="T4"/>.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Implicit(DotNext.VariantType.Variant{`0,`1,`2})~DotNext.VariantType.Variant{`0,`1,`2,`3}">
            <summary>
            Converts variant value of three possible types into variant value
            of four possibles types.
            </summary>
            <param name="variant">The variant value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_Implicit(DotNext.VariantType.Variant{`0,`1})~DotNext.VariantType.Variant{`0,`1,`2,`3}">
            <summary>
            Converts variant value of two possible types into variant value
            of four possibles types.
            </summary>
            <param name="variant">The variant value to be converted.</param>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_True(DotNext.VariantType.Variant{`0,`1,`2,`3})">
            <summary>
            Indicates that variant value is non-<see langword="null"/> value.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.op_False(DotNext.VariantType.Variant{`0,`1,`2,`3})">
            <summary>
            Indicates that variant value is <see langword="null"/> value.
            </summary>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.ToString">
            <summary>
            Provides textual representation of the stored value.
            </summary>
            <remarks>
            This method calls virtual method <see cref="M:System.Object.ToString"/>
            for the stored value.
            </remarks>
            <returns>The textual representation of the stored value.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.GetHashCode">
            <summary>
            Computes hash code for the stored value.
            </summary>
            <returns>The hash code of the stored value.</returns>
        </member>
        <member name="M:DotNext.VariantType.Variant`4.Equals(System.Object)">
            <summary>
            Determines whether stored value is equal to the given value.
            </summary>
            <param name="other">Other value to compare.</param>
            <returns><see langword="true"/>, if stored value is equal to <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
    </members>
</doc>
