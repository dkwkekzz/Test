<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNext.Unsafe</name>
    </assembly>
    <members>
        <member name="T:DotNext.Collections.Generic.UnmanagedList`1">
            <summary>
            Represents a strongly typed list of objects that is allocated in unmanaged memory.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.#ctor(System.Int32)">
            <summary>
            Allocates a new list in the unmanaged memory
            with desired initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the list.</param>
        </member>
        <member name="P:DotNext.Collections.Generic.UnmanagedList`1.Capacity">
            <summary>
            Gets capacity of this list.
            </summary>
        </member>
        <member name="P:DotNext.Collections.Generic.UnmanagedList`1.Item(System.Int32)">
            <summary>
            Gets or sets item in this list.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The list item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index out of range.</exception>
        </member>
        <member name="P:DotNext.Collections.Generic.UnmanagedList`1.Count">
            <summary>
            Gets number of elements in this list.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Add(`0)">
            <summary>
            Adds a new item to this collection.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Clear">
            <summary>
            Removes all elements in this list.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Contains(`0)">
            <summary>
            Determines whether an element is in this list.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns><see langword="true"/>, if item is found in this list; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="output">The destination of the elements copied from this list.</param>
            <param name="arrayIndex">The index in <paramref name="output"/> at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="output">The destination of the elements copied from this list.</param>
            <param name="arrayIndex">The index in <paramref name="output"/> at which copying begins.</param>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.CopyTo(DotNext.Runtime.InteropServices.UnmanagedArray{`0},System.Int32,System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="output">The destination of the elements copied from this list.</param>
            <param name="arrayIndex">The index in <paramref name="output"/> at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.CopyTo(DotNext.Runtime.InteropServices.UnmanagedArray{`0},System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="output">The destination of the elements copied from this list.</param>
            <param name="arrayIndex">The index in <paramref name="output"/> at which copying begins.</param>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.ToArray">
            <summary>
            Allocates a new array and copies items from this list
            into the allocated array.
            </summary>
            <returns>The array containing items from this list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.GetEnumerator">
            <summary>
            Gets enumerator over all items in this list.
            </summary>
            <returns>The enumerator over all items in this list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <param name="comparer">The equality check function used to compare the given item with the list item.</param>
            <returns>The zero-based index of the first occurence of the given item; otherwise, -1.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The zero-based index of the first occurence of the given item; otherwise, -1.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Find(System.Predicate{`0})">
            <summary>
            Searches item matching to the given predicate in this list, and returns 
            the index of its first occurrence.
            </summary>
            <param name="predicate">The predicate used to check item.</param>
            <returns>The index of the matched item; or -1, if value doesn't exist in this list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the entire list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The zero-based index of the last occurence of the given item; otherwise, -1.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.LastIndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the entire list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <param name="comparer">The equality check function used to compare the given item with the list item.</param>
            <returns>The zero-based index of the last occurence of the given item; otherwise, -1.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches item matching to the given predicate in this list, and returns 
            the index of its last occurrence.
            </summary>
            <param name="predicate">The predicate used to check item.</param>
            <returns>The index of the matched item; or -1, if value doesn't exist in this list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.BinarySearch(`0,System.Comparison{`0})">
            <summary>
            Uses a binary search algorithm to locate a specific element in the sorted list.
            </summary>
            <param name="item">The value to locate.</param>
            <param name="comparison">The comparison algorithm.</param>
            <returns>The index of the item; or -1, if item doesn't exist in the list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.BinarySearch(`0)">
            <summary>
            Uses a binary search algorithm to locate a specific element in the sorted list.
            </summary>
            <param name="item">The value to locate.</param>
            <returns>The index of the item; or -1, if item doesn't exist in the list.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the items in this list according with given comparer.
            </summary>
            <param name="comparison">The items comparison algorithm.</param>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Sort">
            <summary>
            Sorts the items in this list in ascending order.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The value to insert.</param>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific value from the list.
            </summary>
            <param name="item">The value to remove from this list.</param>
            <returns><see langword="true"/>, if item is successfully removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of a specific value from the list.
            </summary>
            <param name="item">The value to remove from this list.</param>
            <returns><see langword="true"/>, if item is successfully removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is invalid.</exception>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in this list.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Dispose">
            <summary>
            Releases unmanaged memory associated with this list.
            </summary>
        </member>
        <member name="M:DotNext.Collections.Generic.UnmanagedList`1.Copy">
            <summary>
            Returns deep copy of this list.
            </summary>
            <returns>The deep copy of this list.</returns>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.IUnmanagedMemory">
            <summary>
            Describes a block of unmanaged memory.
            </summary>
            <remarks>
            This interface should be implemented by 
            </remarks>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.IUnmanagedMemory.Size">
            <summary>
            Number of bytes in the allocated memory.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.IUnmanagedMemory.Address">
            <summary>
            The address of the unmanaged memory.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.IUnmanagedMemory.ToPointer``1">
            <summary>
            Obtains typed pointer to the unmanaged memory.
            </summary>
            <typeparam name="T">The type of the pointer.</typeparam>
            <returns>The typed pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.IUnmanagedMemory.ToPointer(System.Int64)">
            <summary>
            Obtains pointer to the unmanaged memory at the specified offset in the memory.
            </summary>
            <param name="offset">The desired offset in the unmanaged memory.</param>
            <returns>The pointer to the unmanaged memory adjusted at the specified offset.</returns>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.NullPointerException">
            <summary>
            The exception that is thrown when there is an attempt to dereference zero pointer.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.NullPointerException.#ctor(System.String)">
            <summary>
            Initializes a new exception representing attempt to dereference zero pointer.
            </summary>
            <param name="message">The human-readable description of this message.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.NullPointerException.#ctor">
            <summary>
            Initializes a new exception representing attempt to dereference zero pointer.
            </summary>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.Pointer`1">
            <summary>
            CLS-compliant typed pointer for .NET languages
            without direct support of pointer data type.
            </summary>
            <remarks>
            Many methods associated with the pointer are unsafe and can destabilize runtime.
            Moreover, pointer type doesn't provide automatic memory management.
            Null-pointer is the only check performed by methods.
            </remarks>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.Pointer`1.Enumerator">
            <summary>
            Represents enumerator over raw memory.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.Pointer`1.Enumerator.Pointer">
            <summary>
            Pointer to the currently enumerating element.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.Pointer`1.Enumerator.Current">
            <summary>
            Current element.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Enumerator.MoveNext">
            <summary>
            Adjust pointer.
            </summary>
            <returns><see langword="true"/>, if next element is available; <see langword="false"/>, if end of sequence reached.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Enumerator.Dispose">
            <summary>
            Releases all resources with this enumerator.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.Pointer`1.Null">
            <summary>
            Represents zero pointer.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.Pointer`1.Size">
            <summary>
            Size of type <typeparamref name="T"/>, in bytes.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.#ctor(`0*)">
            <summary>
            Constructs CLS-compliant pointer from non CLS-compliant pointer.
            </summary>
            <param name="ptr">The pointer value.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.#ctor(System.Void*)">
            <summary>
            Constructs CLS-compliant pointer from non CLS-compliant untyped pointer.
            </summary>
            <param name="ptr">The untyped pointer value.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.#ctor(System.IntPtr)">
            <summary>
            Constructs pointer from <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="ptr">The pointer value.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.#ctor(System.UIntPtr)">
            <summary>
            Constructs pointer from <see cref="T:System.UIntPtr"/> value.
            </summary>
            <param name="ptr">The pointer value.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Swap(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Swaps values between this memory location and the given memory location.
            </summary>
            <param name="other">The other memory location.</param>
            <exception cref="T:DotNext.Runtime.InteropServices.NullPointerException">This pointer is zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> pointer is zero.</exception>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Clear(System.UInt32)">
            <summary>
            Fill memory with zero bytes.
            </summary>
            <param name="length">length of unmanaged memory array.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Clear(System.Int64)">
            <summary>
            Fill memory with zero bytes.
            </summary>
            <param name="count">Number of elements in the unmanaged array.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.WriteTo(DotNext.Runtime.InteropServices.Pointer{`0},System.Int64)">
            <summary>
            Copies block of memory from the source address to the destination address.
            </summary>
            <param name="destination">Destination address.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.WriteTo(`0[],System.Int64,System.Int64)">
            <summary>
            Copies elements from the memory location identified
            by this pointer to managed array.
            </summary>
            <param name="destination">The array to be modified.</param>
            <param name="offset">The position in the destination array from which copying begins.</param>
            <param name="count">The number of elements of type <typeparamref name="T"/> to be copied.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.WriteTo(System.IO.Stream,System.Int64)">
            <summary>
            Copies bytes from the memory location identified by this pointer to the stream.
            </summary>
            <param name="destination">The destination stream.</param>
            <param name="count">The number of elements of type <typeparamref name="T"/> to be copied.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.WriteToAsync(System.IO.Stream,System.Int64)">
            <summary>
            Copies bytes from the memory location identified
            by this pointer to the stream asynchronously.
            </summary>
            <param name="destination">The destination stream.</param>
            <param name="count">The number of elements of type <typeparamref name="T"/> to be copied.</param>
            <returns>The task instance representing asynchronous state of the copying process.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.ReadFrom(`0[],System.Int64,System.Int64)">
            <summary>
            Copies elements from the specified array into
            the memory block identified by this pointer.
            </summary>
            <param name="source">The source array.</param>
            <param name="offset">The position in the source array from which copying begins.</param>
            <param name="count">The number of elements of type <typeparamref name="T"/> to be copied.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.ReadFrom(System.IO.Stream,System.Int64)">
            <summary>
            Copies bytes from the given stream to the memory location identified by this pointer.
            </summary>
            <param name="source">The source stream.</param>
            <param name="count">The number of elements of type <typeparamref name="T"/> to be copied.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.ReadFromAsync(System.IO.Stream,System.Int64)">
            <summary>
            Copies bytes from the given stream to the memory location identified by this pointer asynchronously.
            </summary>
            <param name="source">The source stream.</param>
            <param name="count">The number of elements of type <typeparamref name="T"/> to be copied.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.AsStream(System.Int64)">
            <summary>
            Returns representation of the memory identified by this pointer in the form of the stream.
            </summary>
            <remarks>
            This method returns <see cref="T:System.IO.Stream"/> compatible over the memory identified by this pointer. No copying is performed.
            </remarks>
            <param name="count">The number of elements of type <typeparamref name="T"/> referenced by this memory.</param>
            <returns>The stream representing the memory identified by this pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.ToByteArray(System.Int64)">
            <summary>
            Copies block of memory referenced by this pointer
            into managed heap as array of bytes.
            </summary>
            <param name="length">Number of elements to copy.</param>
            <returns>A copy of memory block in the form of byte array.</returns>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.Pointer`1.Address">
            <summary>
            Gets pointer address.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.Pointer`1.IsNull">
            <summary>
            Indicates that this pointer is null
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.As``1">
            <summary>
            Reinterprets pointer type.
            </summary>
            <typeparam name="U">A new pointer type.</typeparam>
            <returns>Reinterpreted pointer type.</returns>
            <exception cref="T:DotNext.GenericArgumentException`1">Type <typeparamref name="U"/> should be the same size or less than type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.AsRef">
            <summary>
            Converts unmanaged pointer into managed pointer.
            </summary>
            <returns>Managed pointer.</returns>
            <exception cref="T:DotNext.Runtime.InteropServices.NullPointerException">This pointer is null.</exception>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.Pointer`1.Value">
            <summary>
            Gets or sets value stored in the memory identified by this pointer.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.GetEnumerator(System.Int64)">
            <summary>
            Gets enumerator over raw memory.
            </summary>
            <param name="length">A number of elements to iterate.</param>
            <returns>Iterator object.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.BitwiseEquals(DotNext.Runtime.InteropServices.Pointer{`0},System.Int64)">
            <summary>
            Computes bitwise equality between two blocks of memory.
            </summary>
            <param name="other">The pointer identifies block of memory to be compared.</param>
            <param name="count">The number of elements of type <typeparamref name="T"/> referenced by both pointers.</param>
            <returns><see langword="true"/>, if both memory blocks have the same bytes; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.BitwiseHashCode(System.Int64,System.Boolean)">
            <summary>
            Computes 32-bit hash code for the block of memory identified by this pointer.
            </summary>
            <param name="count">The number of elements of type <typeparamref name="T"/> referenced by this pointer.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>Content hash code.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.BitwiseHashCode(System.Int64,System.Int32,System.Func{System.Int32,System.Int32,System.Int32},System.Boolean)">
            <summary>
            Computes 32-bit hash code for the block of memory identified by this pointer.
            </summary>
            <param name="count">The number of elements of type <typeparamref name="T"/> referenced by this pointer.</param>
            <param name="hash">Initial value of the hash to be passed into hashing function.</param>
            <param name="hashFunction">The custom hash function.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>Content hash code.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.BitwiseHashCode(System.Int64,System.Int64,System.Func{System.Int64,System.Int64,System.Int64},System.Boolean)">
            <summary>
            Computes 64-bit hash code for the block of memory identified by this pointer.
            </summary>
            <param name="count">The number of elements of type <typeparamref name="T"/> referenced by this pointer.</param>
            <param name="hash">Initial value of the hash to be passed into hashing function.</param>
            <param name="hashFunction">The custom hash function.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>Content hash code.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.BitwiseCompare(DotNext.Runtime.InteropServices.Pointer{`0},System.Int64)">
            <summary>
            Bitwise comparison of two memory blocks.
            </summary>
            <param name="other">The pointer identifies block of memory to be compared.</param>
            <param name="count">The number of elements of type <typeparamref name="T"/> referenced by both pointers.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Addition(DotNext.Runtime.InteropServices.Pointer{`0},System.Int32)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <remarks>
            The offset specifies number of elements of type <typeparamref name="T"/>, not bytes.
            </remarks>
            <param name="pointer">The pointer to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new pointer that reflects the addition of offset to pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Subtraction(DotNext.Runtime.InteropServices.Pointer{`0},System.Int32)">
            <summary>
            Subtracts an offset from the value of a pointer.
            </summary>
            <remarks>
            The offset specifies number of elements of type <typeparamref name="T"/>, not bytes.
            </remarks>
            <param name="pointer">The pointer to subtract the offset from.</param>
            <param name="offset">The offset to subtract.</param>
            <returns>A new pointer that reflects the subtraction of offset from pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Addition(DotNext.Runtime.InteropServices.Pointer{`0},System.Int64)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <remarks>
            The offset specifies number of elements of type <typeparamref name="T"/>, not bytes.
            </remarks>
            <param name="pointer">The pointer to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new pointer that reflects the addition of offset to pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Subtraction(DotNext.Runtime.InteropServices.Pointer{`0},System.Int64)">
            <summary>
            Subtracts an offset from the value of a pointer.
            </summary>
            <remarks>
            The offset specifies number of elements of type <typeparamref name="T"/>, not bytes.
            </remarks>
            <param name="pointer">The pointer to subtract the offset from.</param>
            <param name="offset">The offset to subtract.</param>
            <returns>A new pointer that reflects the subtraction of offset from pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Addition(DotNext.Runtime.InteropServices.Pointer{`0},System.UInt64)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <remarks>
            The offset specifies number of elements of type <typeparamref name="T"/>, not bytes.
            </remarks>
            <param name="pointer">The pointer to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new pointer that reflects the addition of offset to pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Subtraction(DotNext.Runtime.InteropServices.Pointer{`0},System.UInt64)">
            <summary>
            Subtracts an offset from the value of a pointer.
            </summary>
            <remarks>
            The offset specifies number of elements of type <typeparamref name="T"/>, not bytes.
            </remarks>
            <param name="pointer">The pointer to subtract the offset from.</param>
            <param name="offset">The offset to subtract.</param>
            <returns>A new pointer that reflects the subtraction of offset from pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Increment(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Increments this pointer by 1 element of type <typeparamref name="T"/>.
            </summary>
            <param name="pointer">The pointer to add the offset to.</param>
            <returns>A new pointer that reflects the addition of offset to pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Decrement(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Decrements this pointer by 1 element of type <typeparamref name="T"/>.
            </summary>
            <param name="pointer">The pointer to subtract the offset from.</param>
            <returns>A new pointer that reflects the subtraction of offset from pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Equality(DotNext.Runtime.InteropServices.Pointer{`0},DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Indicates that the first pointer represents the same memory location as the second pointer.
            </summary>
            <param name="first">The first pointer to be compared.</param>
            <param name="second">The second pointer to be compared.</param>
            <returns><see langword="true"/>, if the first pointer represents the same memory location as the second pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Inequality(DotNext.Runtime.InteropServices.Pointer{`0},DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Indicates that the first pointer represents the different memory location as the second pointer.
            </summary>
            <param name="first">The first pointer to be compared.</param>
            <param name="second">The second pointer to be compared.</param>
            <returns><see langword="true"/>, if the first pointer represents the different memory location as the second pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Implicit(`0*)~DotNext.Runtime.InteropServices.Pointer{`0}">
            <summary>
            Converts non CLS-compliant pointer into its CLS-compliant representation. 
            </summary>
            <param name="value">The pointer value.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_Implicit(DotNext.Runtime.InteropServices.Pointer{`0})~`0*">
            <summary>
            Converts CLS-compliant pointer into its non CLS-compliant representation. 
            </summary>
            <param name="ptr">The pointer value.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_True(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Checks whether this pointer is not zero.
            </summary>
            <param name="ptr">The pointer to check.</param>
            <returns><see langword="true"/>, if this pointer is not zero; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.op_False(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Checks whether this pointer is zero.
            </summary>
            <param name="ptr">The pointer to check.</param>
            <returns><see langword="true"/>, if this pointer is zero; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Equals``1(DotNext.Runtime.InteropServices.Pointer{``0})">
            <summary>
            Indicates that this pointer represents the same memory location as other pointer.
            </summary>
            <typeparam name="U">The type of the another pointer.</typeparam>
            <param name="other">The pointer to be compared.</param>
            <returns><see langword="true"/>, if this pointer represents the same memory location as other pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Equals(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the value stored in the memory identified by this pointer is equal to the given value.
            </summary>
            <param name="other">The value to be compared.</param>
            <param name="comparer">The object implementing comparison algorithm.</param>
            <returns><see langword="true"/>, if the value stored in the memory identified by this pointer is equal to the given value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.GetHashCode(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Computes hash code of the value stored in the memory identified by this pointer.
            </summary>
            <param name="comparer">The object implementing custom hash function.</param>
            <returns>The hash code of the value stored in the memory identified by this pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.GetHashCode">
            <summary>
            Computes hash code of the pointer itself (i.e. address), not of the memory content.
            </summary>
            <returns>The hash code of this pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.Equals(System.Object)">
            <summary>
            Indicates that this pointer represents the same memory location as other pointer.
            </summary>
            <param name="other">The object of type <see cref="T:DotNext.Runtime.InteropServices.Pointer`1"/> to be compared.</param>
            <returns><see langword="true"/>, if this pointer represents the same memory location as other pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.Pointer`1.ToString">
            <summary>
            Returns hexadecimal address represented by this pointer.
            </summary>
            <returns>The hexadecimal value of this pointer.</returns>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.UnmanagedArray`1">
            <summary>
            Represents typed array allocated in the unmanaged heap.
            </summary>
            <remarks>
            Allocated memory is not controlled by Garbage Collector.
            Therefore, it's developer responsibility to release unmanaged memory using <see cref="M:System.IDisposable.Dispose"/> call.
            </remarks>
            <typeparam name="T">Array element type.</typeparam>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.UnmanagedArray`1.Handle">
            <summary>
            Represents GC-friendly reference to the unmanaged array.
            </summary>
            <remarks>
            Unmanaged array allocated using handle can be reclaimed by GC automatically.
            </remarks>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Handle.#ctor(System.Int32)">
            <summary>
            Initializes a new unmanaged array and associate it with the handle.
            </summary>
            <remarks>
            The handle instantiated with this constructor has ownership over unmanaged memory.
            Unmanaged memory will be released when Garbage Collector reclaims instance of this handle
            or <see cref="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Dispose"/> will be called directly.
            </remarks>
            <param name="length">Array length.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Handle.#ctor(DotNext.Runtime.InteropServices.UnmanagedArray{`0})">
            <summary>
            Initializes a new handle for the given array.
            </summary>
            <remarks>
            The handle instantiated with this constructor doesn't have ownership over unmanaged memory.
            </remarks>
            <param name="array">The unmanaged array.</param>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.UnmanagedArray`1.Handle.IsInvalid">
            <summary>
            Gets a value indicating whether the unmanaged memory is released.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Handle.ReleaseHandle">
            <summary>
            Releases referenced unmanaged memory.
            </summary>
            <returns><see langword="true"/>, if this handle is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Handle.op_Implicit(DotNext.Runtime.InteropServices.UnmanagedArray{`0}.Handle)~DotNext.Runtime.InteropServices.UnmanagedArray{`0}">
            <summary>
            Converts handle into unmanaged array reference.
            </summary>
            <param name="handle">A handle to convert.</param>
            <exception cref="T:System.ObjectDisposedException">Handle is closed.</exception>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.#ctor(System.Int32)">
            <summary>
            Allocates a new array in the unmanaged memory of the specified length.
            </summary>
            <param name="length">Array length. Cannot be less or equal than zero.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid length.</exception>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.UnmanagedArray`1.Length">
            <summary>
            Gets length of this array.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.UnmanagedArray`1.Size">
            <summary>
            Size of allocated memory, in bytes.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.UnmanagedArray`1.Address">
            <summary>
            Gets address of the unmanaged memory.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.FindLast(System.Predicate{`0},System.Int32,System.Int32)">
            <summary>
            Searches item matching to the given predicate in a range of elements of the unmanaged array, and returns 
            the index of its last occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <param name="predicate">The predicate used to check item.</param>
            <param name="startIndex">The starting index of the search.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The index of the matched item; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.FindLast(System.Predicate{`0},System.Int32)">
            <summary>
            Searches item matching to the given predicate in a range of elements of the unmanaged array, and returns 
            the index of its last occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <param name="predicate">The predicate used to check item.</param>
            <param name="startIndex">The starting index of the search.</param>
            <returns>The index of the matched item; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches item matching to the given predicate in the unmanaged array, and returns 
            the index of its last occurrence.
            </summary>
            <param name="predicate">The predicate used to check item.</param>
            <returns>The index of the matched item; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object in a range of elements of the unmanaged array, and returns 
            the index of its last occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <param name="item">The value to locate in this array.</param>
            <param name="startIndex">The starting index of the search.</param>
            <param name="count">The number of elements to search.</param>
            <param name="comparer">The custom comparer used to compare array element with the given value.</param>
            <returns>The index of the last occurrence of value; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.LastIndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object in a range of elements of the unmanaged array, and returns 
            the index of its last occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <param name="item">The value to locate in this array.</param>
            <param name="startIndex">The starting index of the search.</param>
            <param name="comparer">The custom comparer used to compare array element with the given value.</param>
            <returns>The index of the last occurrence of value; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of the unmanaged array, and returns 
            the index of its last occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <remarks>
            This method uses <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> comparer
            to compare elements in this array.
            </remarks>
            <param name="item">The value to locate in this array.</param>
            <param name="startIndex">The starting index of the search.</param>
            <returns>The index of the last occurrence of value; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object in a range of elements of the unmanaged array, and returns 
            the index of its last occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <remarks>
            This method uses <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> comparer
            to compare elements in this array.
            </remarks>
            <param name="item">The value to locate in this array.</param>
            <returns>The index of the last occurrence of value; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Find(System.Predicate{`0},System.Int32,System.Int32)">
            <summary>
            Searches item matching to the given predicate in a range of elements of the unmanaged array, and returns 
            the index of its first occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <param name="predicate">The predicate used to check item.</param>
            <param name="startIndex">The starting index of the search.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The index of the matched item; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Find(System.Predicate{`0},System.Int32)">
            <summary>
            Searches item matching to the given predicate in a range of elements of the unmanaged array, and returns 
            the index of its first occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <param name="predicate">The predicate used to check item.</param>
            <param name="startIndex">The starting index of the search.</param>
            <returns>The index of the matched item; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Find(System.Predicate{`0})">
            <summary>
            Searches item matching to the given predicate in the unmanaged array, and returns 
            the index of its first occurrence.
            </summary>
            <param name="predicate">The predicate used to check item.</param>
            <returns>The index of the matched item; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object in a range of elements of the unmanaged array, and returns 
            the index of its first occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <param name="item">The value to locate in this array.</param>
            <param name="startIndex">The starting index of the search.</param>
            <param name="count">The number of elements to search.</param>
            <param name="comparer">The custom comparer used to compare array element with the given value.</param>
            <returns>The index of the first occurrence of value; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object in a range of elements of the unmanaged array, and returns 
            the index of its first occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <param name="item">The value to locate in this array.</param>
            <param name="startIndex">The starting index of the search.</param>
            <param name="comparer">The custom comparer used to compare array element with the given value.</param>
            <returns>The index of the first occurrence of value; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of the unmanaged array, and returns 
            the index of its first occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <remarks>
            This method uses <see cref="M:DotNext.ValueType`1.BitwiseEquals(`0,`0)"/> comparer
            to compare elements in this array.
            </remarks>
            <param name="item">The value to locate in this array.</param>
            <param name="startIndex">The starting index of the search.</param>
            <returns>The index of the first occurrence of value; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.IndexOf(`0)">
            <summary>
            Searches for the specified object in a range of elements of the unmanaged array, and returns 
            the index of its first occurrence. The range extends from a specified 
            index for a specified number of elements.
            </summary>
            <remarks>
            This method uses <see cref="M:DotNext.ValueType`1.BitwiseEquals(`0,`0)"/> comparer
            to compare elements in this array.
            </remarks>
            <param name="item">The value to locate in this array.</param>
            <returns>The index of the first occurrence of value; or -1, if value doesn't exist in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.BinarySearch(`0,System.Int32,System.Int32,System.Comparison{`0})">
            <summary>
            Uses a binary search algorithm to locate a specific element in the sorted array.
            </summary>
            <param name="item">The value to locate.</param>
            <param name="startIndex">The starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="comparison">The comparison algorithm.</param>
            <returns>The index of the item; or -1, if item doesn't exist in the array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.BinarySearch(`0,System.Comparison{`0})">
            <summary>
            Uses a binary search algorithm to locate a specific element in the sorted array.
            </summary>
            <param name="item">The value to locate.</param>
            <param name="comparison">The comparison algorithm.</param>
            <returns>The index of the item; or -1, if item doesn't exist in the array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Sort(System.Int32,System.Int32,System.Comparison{`0})">
            <summary>
            Sorts the range of this array.
            </summary>
            <param name="startIndex">The starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparison">The comparison algorithm.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts this array.
            </summary>
            <param name="comparison">The comparison logic.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Sort">
            <summary>
            Applies ascending sort of this array.
            </summary>
            <remarks>
            This method uses QuickSort algorithm.
            </remarks>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.BinarySearch(`0)">
            <summary>
            Uses a binary search algorithm to locate a specific element in the sorted array.
            </summary>
            <remarks>
            This method uses <see cref="M:DotNext.ValueType`1.BitwiseCompare(`0,`0)"/> method
            to compare two values.
            </remarks>
            <param name="item">The value to locate.</param>
            <returns>The index of the item; or -1, if item doesn't exist in the array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.ElementAt(System.Int32)">
            <summary>
            Gets pointer to array element.
            </summary>
            <param name="index">Index of the element.</param>
            <returns>Pointer to array element.</returns>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.UnmanagedArray`1.Item(System.Int32)">
            <summary>
            Gets or sets array element.
            </summary>
            <param name="index">Element index.</param>
            <returns>Array element.</returns>
            <exception cref="T:DotNext.Runtime.InteropServices.NullPointerException">This array is not allocated.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Invalid index.</exception>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.ToPointer``1">
            <summary>
            Obtains typed pointer to the unmanaged memory.
            </summary>
            <typeparam name="U">The type of the pointer.</typeparam>
            <returns>The typed pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.ToPointer(System.Int64)">
            <summary>
            Gets pointer to the memory block.
            </summary>
            <param name="offset">Zero-based byte offset.</param>
            <returns>Byte located at the specified offset in the memory.</returns>
            <exception cref="T:DotNext.Runtime.InteropServices.NullPointerException">This buffer is not allocated.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Invalid offset.</exception>    
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.WriteTo(DotNext.Runtime.InteropServices.UnmanagedArray{`0},System.Int64,System.Int64)">
            <summary>
            Copies elements from this array into other array. 
            </summary>
            <param name="destination">The destination array.</param>
            <param name="offset">The position in the destination array from which copying begins.</param>
            <param name="count">The number of elements to be copied.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.WriteTo(DotNext.Runtime.InteropServices.UnmanagedArray{`0})">
            <summary>
            Copies elements from this array to the destination array,
            </summary>
            <param name="destination">The destination array.</param>
            <returns>The actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.WriteTo(`0[],System.Int64,System.Int64)">
            <summary>
            Copies elements from this array to the managed array. 
            </summary>
            <param name="destination">The destination array.</param>
            <param name="offset">The position in the destination array from which copying begins.</param>
            <param name="count">The number of elements to be copied.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.WriteTo(`0[])">
            <summary>
            Copies elements from this array to the managed array. 
            </summary>
            <param name="destination">The destination array.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.ReadFrom(`0[],System.Int64,System.Int64)">
            <summary>
            Copies elements from given managed array to the this array. 
            </summary>
            <param name="source">The source array.</param>
            <param name="offset">The position in the source array from which copying begins.</param>
            <param name="count">The number of elements to be copied.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.ReadFrom(`0[])">
            <summary>
            Copies elements from given managed array to the this array. 
            </summary>
            <param name="source">The source array.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.ReadFrom(DotNext.Runtime.InteropServices.UnmanagedArray{`0},System.Int64,System.Int64)">
            <summary>
            Copies elements from given unmanaged array to the this array. 
            </summary>
            <param name="source">The source unmanaged array.</param>
            <param name="offset">The position in the source array from which copying begins.</param>
            <param name="count">The number of elements to be copied.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.ReadFrom(DotNext.Runtime.InteropServices.UnmanagedArray{`0})">
            <summary>
            Copies elements from given unmanaged array to the this array. 
            </summary>
            <param name="source">The source unmanaged array.</param>
            <returns>Actual number of copied elements.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.As``1">
            <summary>
            Reinterprets reference to the unmanaged array.
            </summary>
            <remarks>
            Size of <typeparamref name="U"/> must be a multiple of the size <typeparamref name="T"/>.
            </remarks>
            <typeparam name="U">New element type.</typeparam>
            <returns>Reinterpreted unmanaged array which points to the same memory as original array.</returns>
            <exception cref="T:DotNext.GenericArgumentException`1">Invalid size of target element type.</exception>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.CopyToManagedHeap">
            <summary>
            Converts this unmanaged array into managed array.
            </summary>
            <returns>Managed copy of unmanaged array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Copy">
            <summary>
            Creates bitwise copy of unmanaged array.
            </summary>
            <returns>Bitwise copy of unmanaged array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.BitwiseEquals(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Computes bitwise equality between two blocks of memory.
            </summary>
            <param name="other">The block of memory to be compared.</param>
            <returns><see langword="true"/>, if both memory blocks have the same bytes; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.BitwiseEquals(`0[])">
            <summary>
            Computes bitwise equality between this array and the specified managed array.
            </summary>
            <param name="other">The array to be compared.</param>
            <returns><see langword="true"/>, if both memory blocks have the same bytes; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.BitwiseCompare(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Bitwise comparison of the memory blocks.
            </summary>
            <param name="other">The block of memory to be compared.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.BitwiseCompare(`0[])">
            <summary>
            Bitwise comparison of the memory blocks.
            </summary>
            <param name="other">The array to be compared.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Equals``1(DotNext.Runtime.InteropServices.UnmanagedArray{``0})">
            <summary>
            Determines whether this unmanaged array points to the same memory block as other unmanaged array.
            </summary>
            <typeparam name="U">The type of elements in other unmanaged array.</typeparam>
            <param name="other">The array to be compared.</param>
            <returns><see langword="true"/>, if this unmanaged array points to the same memory block as other unmanaged array; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Equals(System.Object)">
            <summary>
            Determines whether this unmanaged array points to the same memory block as other unmanaged array.
            </summary>
            <param name="other">The object of type <see cref="T:DotNext.Runtime.InteropServices.UnmanagedArray`1"/>, <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/> to be compared.</param>
            <returns><see langword="true"/>, if this unmanaged array points to the same memory block as other unmanaged array; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Equals(`0[],System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines this array contains the same elements as the given array using
            custom equality check function.
            </summary>
            <param name="other">The array to be compared.</param>
            <param name="comparer">The object implementing equality check logic.</param>
            <returns><see langword="true"/>, if this array contains the same elements as the given array; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Equals(DotNext.Runtime.InteropServices.UnmanagedArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines this array contains the same elements as the given array using
            custom equality check function.
            </summary>
            <param name="other">The array to be compared.</param>
            <param name="comparer">The object implementing equality check logic.</param>
            <returns><see langword="true"/>, if this array contains the same elements as the given array; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Compare(`0[],System.Collections.Generic.IComparer{`0})">
            <summary>
            Performs comparison between each two elements from this and given array.
            </summary>
            <param name="other">The array to be compared.</param>
            <param name="comparer">The custom comparison logic.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Compare(DotNext.Runtime.InteropServices.UnmanagedArray{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Performs comparison between each two elements from this and given array.
            </summary>
            <param name="other">The array to be compared.</param>
            <param name="comparer">The custom comparison logic.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.GetEnumerator">
            <summary>
            Gets enumerator over elements in this array.
            </summary>
            <returns>The enumerator over elements in this array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.GetHashCode">
            <summary>
            Computes the hash code of the unmanaged array address, not of the array content.
            </summary>
            <returns>The hash code of the unmanaged array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.ToString">
            <summary>
            Returns hexadecimal representation of the unmanaged array address.
            </summary>
            <returns>The hexadecimal representation of the unmanaged array address.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.op_Implicit(DotNext.Runtime.InteropServices.UnmanagedArray{`0})~DotNext.Runtime.InteropServices.Pointer{`0}">
            <summary>
            Obtains a pointer to the unmanaged array.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.op_Implicit(DotNext.Runtime.InteropServices.UnmanagedArray{`0})~System.Span{`0}">
            <summary>
            Obtains span to the unmanaged array.
            </summary>
            <param name="array">The unmanaged array.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.op_Equality(DotNext.Runtime.InteropServices.UnmanagedArray{`0},DotNext.Runtime.InteropServices.UnmanagedArray{`0})">
            <summary>
            Determines whether two unmanaged arrays point to the same memory block.
            </summary>
            <param name="first">The first unmanaged array reference to be compared.</param>
            <param name="second">The second unmanaged array reference to be compared.</param>
            <returns><see langword="true"/>, if both unmanaged arrays point to the same memory block.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.op_Inequality(DotNext.Runtime.InteropServices.UnmanagedArray{`0},DotNext.Runtime.InteropServices.UnmanagedArray{`0})">
            <summary>
            Determines whether two unmanaged arrays point to the different memory blocks.
            </summary>
            <param name="first">The first unmanaged array reference to be compared.</param>
            <param name="second">The second unmanaged array reference to be compared.</param>
            <returns><see langword="true"/>, if both unmanaged arrays point to the different memory blocks.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.op_Equality(DotNext.Runtime.InteropServices.UnmanagedArray{`0},DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Determines whether two unmanaged arrays point to the same memory block.
            </summary>
            <param name="first">The first unmanaged array reference to be compared.</param>
            <param name="second">The second unmanaged array reference to be compared.</param>
            <returns><see langword="true"/>, if both unmanaged arrays point to the same memory block.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.op_Inequality(DotNext.Runtime.InteropServices.UnmanagedArray{`0},DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Determines whether two unmanaged arrays point to the different memory blocks.
            </summary>
            <param name="first">The first unmanaged array reference to be compared.</param>
            <param name="second">The second unmanaged array reference to be compared.</param>
            <returns><see langword="true"/>, if both unmanaged arrays point to the different memory blocks.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.op_Addition(DotNext.Runtime.InteropServices.UnmanagedArray{`0},System.Int32)">
            <summary>
            Obtains a pointer to the array element.
            </summary>
            <param name="array">The unmanaged array.</param>
            <param name="elementIndex">The element index.</param>
            <returns>The pointer to the array element.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedArray`1.Dispose">
            <summary>
            Releases unmanaged memory associated with the array.
            </summary>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.UnmanagedMemory`1">
            <summary>
            Represents unmanaged structured memory located outside of managed heap.
            </summary>
            <remarks>
            Allocated memory is not controlled by Garbage Collector.
            Therefore, it's developer responsibility to release unmanaged memory using <see cref="M:System.IDisposable.Dispose"/> call.
            </remarks>
            <typeparam name="T">Type to be allocated in the unmanaged heap.</typeparam>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Handle">
            <summary>
            Represents GC-friendly reference to the unmanaged memory.
            </summary>
            <remarks>
            Unmanaged memory allocated using handle can be reclaimed by GC automatically.
            </remarks>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Handle.#ctor">
            <summary>
            Allocates a new unmanaged memory and associate it
            with handle.
            </summary>
            <remarks>
            The handle instantiated with this constructor has ownership over unmanaged memory.
            Unmanaged memory will be released when Garbage Collector reclaims instance of this handle
            or <see cref="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Dispose"/> will be called directly.
            </remarks>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Handle.#ctor(`0)">
            <summary>
            Allocates a new unmanaged memory and associate it with handle.
            </summary>
            <remarks>
            The handle instantiated with this constructor has ownership over unmanaged memory.
            Unmanaged memory will be released when Garbage Collector reclaims instance of this handle
            or <see cref="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Dispose"/> will be called directly.
            </remarks>
            <param name="value">A value to be placed into unmanaged memory.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Handle.#ctor(DotNext.Runtime.InteropServices.UnmanagedMemory{`0})">
            <summary>
            Initializes a new handle for the given unmanaged memory.
            </summary>
            <remarks>
            The handle instantiated with this constructor doesn't have ownership over unmanaged memory.
            </remarks>
            <param name="buffer"></param>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Handle.IsInvalid">
            <summary>
            Gets a value indicating whether the unmanaged memory is released.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Handle.ReleaseHandle">
            <summary>
            Releases referenced unmanaged memory.
            </summary>
            <returns><see langword="true"/>, if this handle is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Handle.op_Implicit(DotNext.Runtime.InteropServices.UnmanagedMemory{`0}.Handle)~DotNext.Runtime.InteropServices.UnmanagedMemory{`0}">
            <summary>
            Converts handle into unmanaged buffer structure.
            </summary>
            <param name="handle">Handle to convert.</param>
            <exception cref="T:System.ObjectDisposedException">Handle is closed.</exception>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.ToPointer``1">
            <summary>
            Obtains typed pointer to the unmanaged memory.
            </summary>
            <typeparam name="U">The type of the pointer.</typeparam>
            <returns>The typed pointer.</returns>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Address">
            <summary>
            Gets address of the unmanaged memory.
            </summary>
        </member>
        <member name="P:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Value">
            <summary>
            Gets or sets value stored in unmanaged memory.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Box(`0)">
            <summary>
            Boxes unmanaged type into unmanaged heap.
            </summary>
            <param name="value">A value to be placed into unmanaged memory.</param>
            <returns>Embedded reference to the allocated unmanaged memory.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Alloc">
            <summary>
            Allocates unmanaged type in the unmanaged heap.
            </summary>
            <returns>Embedded reference to the allocated unmanaged memory.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.ReadFrom``1(DotNext.Runtime.InteropServices.Pointer{``0})">
            <summary>
            Copies the value located at the memory block identified by the given pointer
            into the memory identified by this instance.
            </summary>
            <remarks>
            If size of type <typeparamref name="U"/> is greater than <typeparamref name="T"/>
            then not all bits will be copied. In this case, the copied bits depend on underlying
            hardware architecture and endianess of bytes in memory.
            </remarks>
            <typeparam name="U">The type of the value located at source memory block.</typeparam>
            <param name="source">The source memory block.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.WriteTo``1(DotNext.Runtime.InteropServices.Pointer{``0})">
            <summary>
            Copies the value located at the memory block identified by this instance to
            another location in the memory.
            </summary>
            <remarks>
            If size of type <typeparamref name="T"/> is greater than <typeparamref name="U"/>
            then not all bits will be copied. In this case, the copied bits depend on underlying
            hardware architecture and endianess of bytes in memory.
            </remarks>
            <typeparam name="U">The type indicating size of the destination memory block.</typeparam>
            <param name="destination">The destination memory block.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.WriteTo(`0@)">
            <summary>
            Copies the value located at the memory block identified by this instance to
            another located in the memory represented by given unmanaged pointer.
            </summary>
            <param name="destination">The managed pointer which points to the destination memory block.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.WriteTo``1(DotNext.Runtime.InteropServices.UnmanagedMemory{``0})">
            <summary>
            Copies the value located at the memory block identified by this instance to another location in the memory.
            </summary>
            <remarks>
            If size of type <typeparamref name="T"/> is greater than <typeparamref name="U"/>
            then not all bits will be copied. In this case, the copied bits depend on underlying
            hardware architecture and endianess of bytes in memory.
            </remarks>
            <typeparam name="U">The type indicating size of the destination memory block.</typeparam>
            <param name="destination">The destination memory block.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.CopyToManagedHeap">
            <summary>
            Creates a copy of value in the managed heap.
            </summary>
            <returns>A boxed copy in the managed heap.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Copy">
            <summary>
            Creates bitwise copy of unmanaged buffer.
            </summary>
            <returns>Bitwise copy of unmanaged buffer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.As``1">
            <summary>
            Reinterprets reference to the unmanaged buffer.
            </summary>
            <remarks>
            Type <typeparamref name="U"/> should be of the same size or less than type <typeparamref name="U"/>.
            </remarks>
            <typeparam name="U">New buffer type.</typeparam>
            <returns>Reinterpreted reference pointing to the same memory as original buffer.</returns>
            <exception cref="T:DotNext.GenericArgumentException`1">Target type should be of the same size or less than original type.</exception>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.ToPointer(System.Int64)">
            <summary>
            Gets pointer to the memory block.
            </summary>
            <param name="offset">Zero-based byte offset.</param>
            <returns>Byte located at the specified offset in the memory.</returns>
            <exception cref="T:DotNext.Runtime.InteropServices.NullPointerException">This buffer is not allocated.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Invalid offset.</exception>    
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.op_Implicit(DotNext.Runtime.InteropServices.UnmanagedMemory{`0})~DotNext.Runtime.InteropServices.Pointer{`0}">
            <summary>
            Obtains typed pointer to the memory block identified by this instance.
            </summary>
            <param name="memory">The memory block reference.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.op_Implicit(DotNext.Runtime.InteropServices.UnmanagedMemory{`0})~System.Span{`0}">
            <summary>
            Obtains span to the unmanaged memory.
            </summary>
            <param name="memory">The memory block reference.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.op_Implicit(DotNext.Runtime.InteropServices.UnmanagedMemory{`0})~`0">
            <summary>
            Extracts value from the unmanaged memory.
            </summary>
            <param name="memory">The memory block reference.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Dispose">
            <summary>
            Releases unmanaged memory associated with the boxed type.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Equals``1(DotNext.Runtime.InteropServices.UnmanagedMemory{``0})">
            <summary>
            Indicates that this pointer represents the same memory location as other pointer.
            </summary>
            <typeparam name="U">The type of the another pointer.</typeparam>
            <param name="other">The pointer to be compared.</param>
            <returns><see langword="true"/>, if this pointer represents the same memory location as other pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.GetHashCode">
            <summary>
            Computes hash code of the pointer itself (i.e. address), not of the memory content.
            </summary>
            <returns>The hash code of this pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Equals(System.Object)">
            <summary>
            Indicates that this pointer represents the same memory location as other pointer.
            </summary>
            <param name="other">The object of type <see cref="T:DotNext.Runtime.InteropServices.UnmanagedMemory`1"/>, <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/> to be compared.</param>
            <returns><see langword="true"/>, if this pointer represents the same memory location as other pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.ToString">
            <summary>
            Returns address of this memory in hexadecimal format.
            </summary>
            <returns>The addres of this memory.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.BitwiseEquals(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Computes bitwise equality between two blocks of memory.
            </summary>
            <param name="other">The pointer identifies block of memory to be compared.</param>
            <returns><see langword="true"/>, if both memory blocks have the same bytes; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.BitwiseCompare(DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Bitwise comparison of two memory blocks.
            </summary>
            <param name="other">The pointer identifies block of memory to be compared.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.Equals(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the value stored in the memory identified by this pointer is equal to the given value.
            </summary>
            <param name="other">The value to be compared.</param>
            <param name="comparer">The object implementing comparison algorithm.</param>
            <returns><see langword="true"/>, if the value stored in the memory identified by this pointer is equal to the given value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.GetHashCode(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Computes hash code of the value stored in the memory identified by this pointer.
            </summary>
            <param name="comparer">The object implementing custom hash function.</param>
            <returns>The hash code of the value stored in the memory identified by this pointer.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.op_Equality(DotNext.Runtime.InteropServices.UnmanagedMemory{`0},DotNext.Runtime.InteropServices.UnmanagedMemory{`0})">
            <summary>
            Indicates that the first pointer represents the same memory location as the second pointer.
            </summary>
            <param name="first">The first pointer to be compared.</param>
            <param name="second">The second pointer to be compared.</param>
            <returns><see langword="true"/>, if the first pointer represents the same memory location as the second pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.op_Inequality(DotNext.Runtime.InteropServices.UnmanagedMemory{`0},DotNext.Runtime.InteropServices.UnmanagedMemory{`0})">
            <summary>
            Indicates that the first pointer represents the different memory location as the second pointer.
            </summary>
            <param name="first">The first pointer to be compared.</param>
            <param name="second">The second pointer to be compared.</param>
            <returns><see langword="true"/>, if the first pointer represents the different memory location as the second pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.op_Equality(DotNext.Runtime.InteropServices.UnmanagedMemory{`0},DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Indicates that the first pointer represents the same memory location as the second pointer.
            </summary>
            <param name="first">The first pointer to be compared.</param>
            <param name="second">The second pointer to be compared.</param>
            <returns><see langword="true"/>, if the first pointer represents the same memory location as the second pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemory`1.op_Inequality(DotNext.Runtime.InteropServices.UnmanagedMemory{`0},DotNext.Runtime.InteropServices.Pointer{`0})">
            <summary>
            Indicates that the first pointer represents the different memory location as the second pointer.
            </summary>
            <param name="first">The first pointer to be compared.</param>
            <param name="second">The second pointer to be compared.</param>
            <returns><see langword="true"/>, if the first pointer represents the different memory location as the second pointer; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions">
            <summary>
            Represents extension methods common to all unmanaged memory structures.
            </summary>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.ToByteArray``1(``0@)">
            <summary>
            Creates a copy of unmanaged memory inside of managed heap.
            </summary>
            <returns>A copy of unmanaged memory in the form of byte array.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.AsStream``1(``0@)">
            <summary>
            Represents unmanaged memory as stream.
            </summary>
            <param name="memory">The unmanaged memory.</param>
            <returns>A stream to unmanaged memory.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.WriteTo``1(``0@,System.IO.Stream)">
            <summary>
            Copies bytes from the memory location to the stream.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="source">The source memory location.</param>
            <param name="destination">The destination stream.</param>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.WriteToAsync``1(``0@,System.IO.Stream)">
            <summary>
            Copies bytes from the memory location to the stream asynchronously.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="source">The source memory location.</param>
            <param name="destination">The destination stream.</param>
            <returns>The task instance representing asynchronous state of the copying process.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.WriteTo``1(``0@,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Copies bytes from the memory location to the managed array of bytes.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="source">The source memory location.</param>
            <param name="destination">The destination array.</param>
            <param name="offset">The position in the destination array from which copying begins.</param>
            <param name="count">The number of arrays elements to be copied.</param>
            <returns>The actual number of copied bytes.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.WriteTo``1(``0@,System.Byte[])">
            <summary>
            Copies bytes from the memory location to the managed array of bytes.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="source">The source memory location.</param>
            <param name="destination">The destination array.</param>
            <returns>The actual number of copied bytes.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.Clear``1(``0@)">
            <summary>
            Sets all bits of allocated memory to zero.
            </summary>
            <param name="memory">The unmanaged memory to be cleared.</param>
            <exception cref="T:DotNext.Runtime.InteropServices.NullPointerException">The memory is not allocated.</exception>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.ReadFrom``1(``0@,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Copies bytes from the the managed array of bytes to the memory location.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="source">The source array.</param>
            <param name="destination">The destination memory location.</param>
            <param name="offset">The position in the source array from which copying begins.</param>
            <param name="count">The number of arrays elements to be copied.</param>
            <returns>The actual number of copied bytes.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.ReadFrom``1(``0@,System.Byte[])">
            <summary>
            Copies bytes from the the managed array of bytes to the given memory location.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="source">The source array.</param>
            <param name="destination">The destination memory location.</param>
            <returns>The actual number of copied bytes.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.ReadFrom``1(``0@,System.IO.Stream)">
            <summary>
            Copies bytes from the stream to the given memory location.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="source">The source stream.</param>
            <param name="destination">The destination memory location.</param>
            <returns>The actual number</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.ReadFromAsync``1(``0@,System.IO.Stream)">
            <summary>
            Copies bytes from the stream to the given memory location.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="source">The source stream.</param>
            <param name="destination">The destination memory location.</param>
            <returns>The actual number</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.BitwiseEquals``2(``0@,``1)">
            <summary>
            Computes bitwise equality between two blocks of memory.
            </summary>
            <typeparam name="M1">The first type of the unmanaged memory view.</typeparam>
            <typeparam name="M2">The second type of the unmanaged memory view.</typeparam>
            <param name="first">The first block of memory to be compared.</param>
            <param name="second">The second block of memory to be compared.</param>
            <returns><see langword="true"/>, if both memory blocks have the same bytes; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.BitwiseHashCode``1(``0@,System.Boolean)">
            <summary>
            Computes 32-bit hash code for the block of memory.
            </summary>
            <typeparam name="M">The type of the unmanaged memory view.</typeparam>
            <param name="memory">The memory block.</param>
            <param name="salted"><see langword="true"/> to include randomized salt data into hashing; <see langword="false"/> to use data from memory only.</param>
            <returns>Content hash code.</returns>
        </member>
        <member name="M:DotNext.Runtime.InteropServices.UnmanagedMemoryExtensions.BitwiseCompare``2(``0@,``1)">
            <summary>
            Bitwise comparison of two memory blocks.
            </summary>
            <typeparam name="M1">The first type of the unmanaged memory view.</typeparam>
            <typeparam name="M2">The second type of the unmanaged memory view.</typeparam>
            <param name="first">The first block of memory to be compared.</param>
            <param name="second">The second block of memory to be compared.</param>
            <returns>Comparison result which has the semantics as return type of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="T:DotNext.Runtime.InteropServices.UnmanagedMemoryHandle`1">
            <summary>
            Represents handle to unmanaged memory.
            </summary>
            <typeparam name="T">Type of pointer.</typeparam>
        </member>
    </members>
</doc>
